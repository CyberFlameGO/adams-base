/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * ProcessActor.java
 * Copyright (C) 2018 University of Waikato, Hamilton, NZ
 */

package adams.flow.transformer;

import adams.core.QuickInfoHelper;
import adams.core.Utils;
import adams.flow.container.ProcessActorContainer;
import adams.flow.core.Actor;
import adams.flow.core.Token;
import adams.flow.processor.ActorProcessor;
import adams.flow.processor.GraphicalOutputProducingProcessor;
import adams.flow.processor.ListingProcessor;
import adams.flow.processor.ModifyingProcessor;
import adams.flow.processor.MultiProcessor;
import adams.gui.core.BasePanel;

import java.awt.BorderLayout;
import java.awt.Component;

/**
 <!-- globalinfo-start -->
 <!-- globalinfo-end -->
 *
 <!-- options-start -->
 <!-- options-end -->
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 */
public class ProcessActor
  extends AbstractInteractiveTransformerDialog {

  private static final long serialVersionUID = 1877006726746922569L;

  /** the processor to apply. */
  protected ActorProcessor m_Processor;

  /** whether to display any graphical output. */
  protected boolean m_ShowGraphicalOutput;

  /** the graphical component (if any). */
  protected transient Component m_Component;

  /**
   * Returns a string describing the object.
   *
   * @return 			a description suitable for displaying in the gui
   */
  @Override
  public String globalInfo() {
    return "Applies the specified processor to the incoming actor and forwards the result.\n"
      + "For processors implementing " + Utils.classToString(ModifyingProcessor.class) + " "
      + "the modified actor is forwarded, all others just forward the incoming actor.\n"
      + "If the processor should implement " + Utils.classToString(ListingProcessor.class) + " "
      + "then any generated list gets stored as string array in the outgoing container as well.\n"
      + "Processors implementing " + Utils.classToString(GraphicalOutputProducingProcessor.class) + " "
      + "can optionall display the graphical output as well (off by default).";
  }

  /**
   * Adds options to the internal list of options.
   */
  @Override
  public void defineOptions() {
    super.defineOptions();

    m_OptionManager.add(
      "processor", "processor",
      new MultiProcessor());

    m_OptionManager.add(
      "show-graphical-output", "showGraphicalOutput",
      false);
  }

  /**
   * Resets the object.
   */
  @Override
  protected void reset() {
    super.reset();

    m_Component = null;
  }

  /**
   * Sets the processor to use.
   *
   * @param value	the processor
   */
  public void setProcessor(ActorProcessor value) {
    m_Processor = value;
    reset();
  }

  /**
   * Returns the processor to use.
   *
   * @return		the processor
   */
  public ActorProcessor getProcessor() {
    return m_Processor;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the gui
   */
  public String processorTipText() {
    return "The actor processor to apply to the incoming actor.";
  }

  /**
   * Sets whether to show any graphical output generated by the processor.
   *
   * @param value	true if to show
   */
  public void setShowGraphicalOutput(boolean value) {
    m_ShowGraphicalOutput = value;
    reset();
  }

  /**
   * Returns whether to show any graphical output generated by the processor.
   *
   * @return		true if to show
   */
  public boolean getShowGraphicalOutput() {
    return m_ShowGraphicalOutput;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the gui
   */
  public String showGraphicalOutputTipText() {
    return "If enabled, any Swing components generated by a "
      + Utils.classToString(GraphicalOutputProducingProcessor.class)
      + " processor will get displayed.";
  }

  /**
   * Returns a quick info about the actor, which will be displayed in the GUI.
   *
   * @return		null if no info available, otherwise short string
   */
  @Override
  public String getQuickInfo() {
    String	result;

    if ((m_Processor instanceof GraphicalOutputProducingProcessor) && m_ShowGraphicalOutput)
      result = super.getQuickInfo() + ", ";
    else
      result = "";

    result += QuickInfoHelper.toString(this, "processor", m_Processor, "processor: ");
    result += QuickInfoHelper.toString(this, "showGraphicalOutput", m_ShowGraphicalOutput, "show output", ", ");

    return result;
  }

  /**
   * Returns the class that the consumer accepts.
   *
   * @return		the Class of objects that can be processed
   */
  @Override
  public Class[] accepts() {
    return new Class[]{Actor.class};
  }

  /**
   * Returns the class of objects that it generates.
   *
   * @return		the Class of the generated tokens
   */
  @Override
  public Class[] generates() {
    return new Class[]{ProcessActorContainer.class};
  }

  /**
   * Does nothing.
   */
  @Override
  public void clearPanel() {
  }

  /**
   * Creates the panel to display in the dialog.
   *
   * @return		the panel
   */
  @Override
  protected BasePanel newPanel() {
    BasePanel	result;

    result = new BasePanel(new BorderLayout());
    if (m_Component != null)
      result.add(m_Component, BorderLayout.CENTER);

    return result;
  }

  /**
   * Creates a title for the dialog. Default implementation only returns
   * the full name of the actor.
   *
   * @return		the title of the dialog
   */
  @Override
  protected String createTitle() {
    String	result;

    result = super.createTitle();

    if (m_Processor instanceof GraphicalOutputProducingProcessor)
      result += " - " + ((GraphicalOutputProducingProcessor) m_Processor).getTitle();

    return result;
  }

  /**
   * Executes the flow item.
   *
   * @return		null if everything is fine, otherwise error message
   */
  @Override
  protected String doExecute() {
    String			result;
    Actor			actor;
    ProcessActorContainer	cont;

    result      = null;
    actor       = m_InputToken.getPayload(Actor.class);
    m_Component = null;
    cont        = null;

    try {
      m_Processor.process(actor);

      if (m_Processor instanceof ModifyingProcessor)
        cont = new ProcessActorContainer(((ModifyingProcessor) m_Processor).getModifiedActor());
      else
        cont = new ProcessActorContainer(actor);

      if (m_Processor instanceof ListingProcessor)
        cont.setValue(ProcessActorContainer.VALUE_LIST, ((ListingProcessor) m_Processor).getList().toArray(new String[0]));

      if (m_Processor instanceof GraphicalOutputProducingProcessor) {
        if (((GraphicalOutputProducingProcessor) m_Processor).hasGraphicalOutput())
          m_Component = ((GraphicalOutputProducingProcessor) m_Processor).getGraphicalOutput();
      }
    }
    catch (Exception e) {
      result = handleException("Failed to process actor!", e);
    }

    // only show dialog if we have graphical output and what to display it
    if ((result == null) && (m_Component != null) && m_ShowGraphicalOutput)
      result = super.doExecute();

    if ((result == null) && (cont != null))
      m_OutputToken = new Token(cont);

    return result;
  }
}

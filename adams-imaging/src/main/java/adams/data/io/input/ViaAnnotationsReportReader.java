/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * ViaAnnotationsReportReader.java
 * Copyright (C) 2018 University of Waikato, Hamilton, NZ
 */

package adams.data.io.input;

import adams.core.io.FileUtils;
import adams.data.report.Report;
import adams.flow.transformer.locateobjects.LocatedObject;
import adams.flow.transformer.locateobjects.LocatedObjects;
import adams.gui.visualization.image.ObjectLocationsOverlayFromReport;
import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;
import net.minidev.json.parser.JSONParser;

import java.awt.Polygon;
import java.awt.Rectangle;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

/**
 <!-- globalinfo-start -->
 <!-- globalinfo-end -->
 *
 <!-- options-start -->
 <!-- options-end -->
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 */
public class ViaAnnotationsReportReader
  extends AbstractReportReader<Report> {

  private static final long serialVersionUID = 5716807404370681434L;

  /** the prefix of the objects in the report. */
  protected String m_Prefix;

  /**
   * Returns a string describing the object.
   *
   * @return 			a description suitable for displaying in the gui
   */
  @Override
  public String globalInfo() {
    return "Interprets polygon annotations generated by VGG Image Annotator.\n"
      + "For more information, see:\n"
      + "http://www.robots.ox.ac.uk/~vgg/software/via/";
  }

  /**
   * Adds options to the internal list of options.
   */
  @Override
  public void defineOptions() {
    super.defineOptions();

    m_OptionManager.add(
      "prefix", "prefix",
      ObjectLocationsOverlayFromReport.PREFIX_DEFAULT);
  }

  /**
   * Sets the field prefix used in the report.
   *
   * @param value 	the field prefix
   */
  public void setPrefix(String value) {
    m_Prefix = value;
    reset();
  }

  /**
   * Returns the field prefix used in the report.
   *
   * @return 		the field prefix
   */
  public String getPrefix() {
    return m_Prefix;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String prefixTipText() {
    return "The report field prefix used in the report.";
  }

  /**
   * Returns a string describing the format (used in the file chooser).
   *
   * @return 			a description suitable for displaying in the
   * 				file chooser
   */
  @Override
  public String getFormatDescription() {
    return "VGG Image Annotator (VIA)";
  }

  /**
   * Returns the extension(s) of the format.
   *
   * @return 			the extension(s) (without the dot!)
   */
  @Override
  public String[] getFormatExtensions() {
    return new String[]{"json"};
  }

  /**
   * Tries to determine the parent ID for the current report.
   *
   * @param report	the report to determine the ID for
   * @return		the parent database ID, -1 if it cannot be determined
   */
  @Override
  protected int determineParentID(Report report) {
    return -1;
  }

  /**
   * Returns a new instance of the report class in use.
   *
   * @return		the new (empty) report
   */
  @Override
  public Report newInstance() {
    return new Report();
  }

  /**
   * Performs the actual reading.
   *
   * @return		the reports that were read
   */
  @Override
  protected List<Report> readData() {
    List<Report>	result;
    JSONParser 		parser;
    FileReader 		freader;
    BufferedReader 	breader;
    LocatedObject	lobj;
    LocatedObjects 	lobjs;
    JSONObject		obj;
    JSONObject		img;
    String		fname;
    JSONObject		regions;
    JSONObject		region;
    JSONObject		shapeAtts;
    String		shapeName;
    JSONArray		pointsX;
    JSONArray		pointsY;
    int			i;
    Polygon		polygon;
    int[]		x;
    int[]		y;
    Rectangle		rect;

    result  = new ArrayList<>();
    freader = null;
    breader = null;
    try {
      freader = new FileReader(m_Input.getAbsolutePath());
      breader = new BufferedReader(freader);
      parser  = new JSONParser(JSONParser.MODE_JSON_SIMPLE);
      lobjs   = new LocatedObjects();
      obj     = (JSONObject) parser.parse(breader);
      for (String imgKey : obj.keySet()) {
	img     = (JSONObject) obj.get(imgKey);
	fname   = img.getAsString("filename");
	regions = (JSONObject) img.get("regions");
	for (String regionKey: regions.keySet()) {
	  region    = (JSONObject) regions.get(regionKey);
	  shapeAtts = (JSONObject) region.get("shape_attributes");
	  shapeName = shapeAtts.getAsString("name");
	  if (!shapeName.equals("polygon"))
	    continue;
	  // parse polygon
	  pointsX = (JSONArray) shapeAtts.get("all_points_x");
	  pointsY = (JSONArray) shapeAtts.get("all_points_y");
	  x       = new int[pointsX.size()];
	  y       = new int[pointsY.size()];
	  for (i = 0; i < pointsX.size(); i++) {
	    x[i] = ((Number) pointsX.get(i)).intValue();
	    y[i] = ((Number) pointsY.get(i)).intValue();
	  }
	  polygon = new Polygon(x, y, x.length);
	  rect    = polygon.getBounds();
	  lobj    = new LocatedObject(null, rect.x, rect.y, rect.width, rect.height);
	  lobj.setPolygon(polygon);
	  lobj.getMetaData().put("filename", fname);
	  lobj.getMetaData().put("region", regionKey);
	  lobjs.add(lobj);
	}
      }
      result.add(lobjs.toReport(m_Prefix));
    }
    catch (Exception e) {
      getLogger().log(Level.SEVERE, "Failed to read JSON file: " + m_Input, e);
    }
    finally {
      FileUtils.closeQuietly(breader);
      FileUtils.closeQuietly(freader);
    }

    return result;
  }
}

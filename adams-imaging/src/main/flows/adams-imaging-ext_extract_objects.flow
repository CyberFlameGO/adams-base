# Project: adams
# Modules: adams-core,adams-imaging,adams-spreadsheet
# Date: 2018-05-09 13:14:46
# User: fracpete
# Charset: UTF-8
adams.flow.control.Trigger -name "extract images" -annotation "Expects the following variabes:\\n- image_dir: the directory with the annotated images\\n- output_dir: directory for storing the extracted objects\\n- max_obj_width: the maximum width of objects to extract, -1 to ignore\\n- max_obj_height: the maximum height of objects to extract, -1 to ignore\\n- scale: factor for scaling the images (0-1)\\n- dialog_title: the title for the file chooser dialog\\n- prefix: the prefix of the object fields in the report\\noptional:\\n- limit_type: true if to limit objects to a specific type\\n- type_key: the meta-data key to look for (eg \\\'type\\\')\\n- type_regexp: the regular expression to match against the type values"
 adams.flow.source.SelectFile -stop-if-canceled true -file-chooser-title @{dialog_title} -initial-dir @{image_dir} -extension jpg,jpeg,png -absolute true
 adams.flow.control.Tee -name report
  adams.flow.transformer.Convert -conversion "adams.data.conversion.ReplaceFileExtension -extension .report"
  adams.flow.transformer.SetVariable -var-name report
 adams.flow.control.Tee -name filename
  adams.flow.transformer.BaseName -remove-extensions true
  adams.flow.transformer.SetVariable -var-name file
  adams.flow.sink.CallableSink -callable Info
 adams.flow.control.Block -condition "adams.flow.condition.bool.Not -condition \"adams.flow.condition.bool.FileExists -file @{report} -generator adams.core.io.NullFilenameGenerator\""
 adams.flow.transformer.ImageReader -reader adams.data.io.input.JAIImageReader -meta-data-reader adams.data.io.input.DefaultSimpleReportReader
 adams.flow.control.Trigger -name "load report"
  adams.flow.source.Variable -var-name report -conversion adams.data.conversion.StringToString
  adams.flow.transformer.ReportFileReader -reader adams.data.io.input.DefaultSimpleReportReader
  adams.flow.transformer.SetStorageValue -storage-name report
 adams.flow.transformer.MergeReport -type STORAGE -storage report
 adams.flow.control.Cast -classname adams.data.image.AbstractImageContainer
 adams.flow.transformer.SetStorageValue -storage-name image
 adams.flow.transformer.GetImageObjects -finder "adams.data.objectfinder.AllFinder -prefix @{prefix}"
 adams.flow.control.Tee -name "reset object params"
  adams.flow.transformer.SetVariable -name x -var-name x -var-value -1
  adams.flow.transformer.SetVariable -name y -var-name y -var-value -1
  adams.flow.transformer.SetVariable -name width -var-name width -var-value -1
  adams.flow.transformer.SetVariable -name height -var-name height -var-value -1
  adams.flow.transformer.SetVariable -name type -var-name type -var-value -notype-
 adams.flow.control.Tee -name "object params"
  adams.flow.control.Tee -name x
   adams.flow.transformer.ImageObjectInfo
   adams.flow.transformer.SetVariable -var-name x
  adams.flow.control.Tee -name y
   adams.flow.transformer.ImageObjectInfo -type Y
   adams.flow.transformer.SetVariable -var-name y
  adams.flow.control.Tee -name width
   adams.flow.transformer.ImageObjectInfo -type WIDTH
   adams.flow.transformer.SetVariable -var-name width
  adams.flow.control.Tee -name height
   adams.flow.transformer.ImageObjectInfo -type HEIGHT
   adams.flow.transformer.SetVariable -var-name height
  adams.flow.control.Tee -name index
   adams.flow.transformer.ImageObjectInfo -type INDEX_STRING
   adams.flow.transformer.SetVariable -var-name index
  adams.flow.control.Trigger -name "output file"
   adams.flow.source.CombineVariables -expression @{file}-@{index}.png -conversion adams.data.conversion.StringToString
   adams.flow.transformer.StringReplace -find " " -replace _ -type ALL
   adams.flow.transformer.PrependDir -prefix @{output_dir}
   adams.flow.transformer.SetVariable -var-name outfile
  adams.flow.control.ConditionalTee -name type -condition "adams.flow.condition.bool.Expression -expression \"@{limit_type} = true\""
   adams.flow.transformer.GetImageObjectMetaData
   adams.flow.transformer.GetMapValue -key @{type_key}
   adams.flow.transformer.SetVariable -var-name type
 adams.flow.control.Tee -name "skip object?"
  adams.flow.transformer.SetVariable -var-name skip_object -var-value "ifelse(((@{x} < 1) or (@{y} < 1) or (@{width} < 1) or (@{height} < 1)), \\\"true\\\", \\\"false\\\")" -value-type STRING_EXPRESSION -expand-value true
  adams.flow.control.ConditionalSubProcess -name "type allowed?" -condition "adams.flow.condition.bool.Expression -expression \"@{limit_type} = true\""
   adams.flow.transformer.SetVariable -var-name skip_object -var-value "@{skip_object} or (not matches(\\\"@{type}\\\", \\\"@{type_regexp}\\\"))" -value-type BOOL_EXPRESSION -expand-value true
  adams.flow.control.ConditionalSubProcess -condition "adams.flow.condition.bool.Expression -expression \"((@{max_obj_width} > -1) or (@{max_obj_height} > -1)) and ((@{height} > (@{max_obj_height} / @{scale})) or (@{width} > (@{max_obj_width} / @{scale})))\""
   adams.flow.transformer.SetVariable -var-name skip_object -var-value true
 adams.flow.control.ConditionalTrigger -name crop -condition "adams.flow.condition.bool.Expression -expression \"@{skip_object} = false\""
  adams.flow.source.StorageValue -storage-name image -conversion adams.data.conversion.UnknownToUnknown
  adams.flow.transformer.BufferedImageTransformer -transformer "adams.data.image.transformer.Cropping -algorithm \"adams.data.image.transformer.crop.RelativeCrop -x @{x} -y @{y} -width @{width} -height @{height}\""
  adams.flow.control.ConditionalSubProcess -condition "adams.flow.condition.bool.Expression -expression \"@{scale} != 1.0\""
   adams.flow.transformer.BufferedImageTransformer -transformer "adams.data.jai.transformer.Resize -width @{scale} -height @{scale}"
  adams.flow.sink.ImageWriter -output @{outfile} -writer adams.data.io.output.JAIImageWriter
 adams.flow.control.IfThenElse -condition "adams.flow.condition.bool.Expression -expression \"(@{max_obj_width} > -1) or (@{max_obj_height} > -1)\""
  adams.flow.control.Trigger -name then
   adams.flow.source.CombineVariables -expression "@{index}: too large = @{skip_object}" -conversion adams.data.conversion.StringToString
   adams.flow.sink.CallableSink -callable Info -optional true
  adams.flow.control.Sequence -name else
   adams.flow.source.CombineVariables -expression @{index} -conversion adams.data.conversion.StringToString
   adams.flow.sink.CallableSink -callable Info -optional true
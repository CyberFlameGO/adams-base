# Project: adams
# Date: 2016-02-15 14:27:26
# User: fracpete
# Charset: UTF-8
adams.flow.control.Flow -annotation "Flow for generating the Mandelbrot set (colored version):\\nhttp://en.wikipedia.org/wiki/Mandelbrot_set\\nA tribute to the late Benoit B. Mandelbrot (1924-2010)" -flow-execution-listener adams.flow.execution.NullListener
 adams.flow.standalone.Standalones -name Initialization
  adams.flow.standalone.SetVariable -name "set num_x" -annotation "the X resolution" -var-name num_x -var-value 160
  adams.flow.standalone.SetVariable -name "set num_y" -annotation "the Y resolution" -var-name num_y -var-value 120
  adams.flow.standalone.SetVariable -name "set num_iter" -annotation "the maximum number of iterations for each point" -var-name num_iter -var-value 100
  adams.flow.standalone.SetVariable -name "set limit" -annotation "the square of the escape radius" -var-name limit -var-value 256
  adams.flow.standalone.SetVariable -name "set min_x" -annotation "minimum x on the z plane" -var-name min_x -var-value -2.5
  adams.flow.standalone.SetVariable -name "set max_x" -annotation "maximum x on the z plane" -var-name max_x -var-value 1.5
  adams.flow.standalone.SetVariable -name "set min_y" -annotation "minimum y on the z plane" -var-name min_y -var-value -1.5
  adams.flow.standalone.SetVariable -name "set max_y" -annotation "maximum y on the z plane" -var-name max_y -var-value 1.5
 adams.flow.standalone.Stopwatch -width 250 -prefix "Execution time " -show-seconds true
 adams.flow.source.Start
 adams.flow.control.Trigger -name "create image"
  adams.flow.source.NewImage -width @{num_x} -height @{num_y} -conversion adams.data.conversion.BufferedImageToBufferedImage
  adams.flow.transformer.SetStorageValue -storage-name image
 adams.flow.control.Trigger -name "loop x"
  adams.flow.source.ForLoop -name "ForLoop X" -upper @{num_x}
  adams.flow.transformer.SetVariable -name "set x" -var-name x
  adams.flow.transformer.MathExpression -name "calc cx" -expression "(@{min_x} + (@{max_x} - @{min_x}) / (@{num_x} - 1) * (X - 1))"
  adams.flow.transformer.SetVariable -name "set cx" -var-name cx
  adams.flow.control.Tee -name "output cx" -skip true
   adams.flow.sink.Console -prefix cx:
  adams.flow.control.Trigger -name "loop y"
   adams.flow.source.ForLoop -upper @{num_y}
   adams.flow.transformer.SetVariable -name "set y" -var-name y
   adams.flow.control.Trigger -name reset
    adams.flow.standalone.Standalones
     adams.flow.standalone.SetVariable -name "set zx" -var-name zx -var-value 0
     adams.flow.standalone.SetVariable -name "set zy" -var-name zy -var-value 0
     adams.flow.standalone.SetVariable -name "set iter" -var-name iter -var-value 0
   adams.flow.transformer.MathExpression -name "calc cy" -expression "(@{min_y} + (@{max_y} - @{min_y}) / (@{num_y} - 1) * (X - 1))"
   adams.flow.transformer.SetVariable -name "set cy" -var-name cy
   adams.flow.control.Tee -name "output cy" -skip true
    adams.flow.sink.Console -prefix cy:
   adams.flow.control.Trigger -name Calc
    adams.flow.source.Start
    adams.flow.control.WhileLoop -annotation "Calculates the following formula:\\n  zn+1 = zn^2 + c\\nwith\\n  z0 = 0+0i\\n  c is calculated from the current x and yi positions\\nChecks whether the distance of zn+1 is greater than \\na certain value or whether the number of iterations\\nhas been exceeded." -condition "adams.flow.condition.bool.Expression -expression \"(((@{zx}^2 + @{zy}^2) < @{limit}) & (@{iter} < @{num_iter}))\""
     adams.flow.source.StringConstants -name "dummy token" -string 0
     adams.flow.transformer.Convert -conversion adams.data.conversion.StringToDouble
     adams.flow.transformer.IncVariable -name "inc iter" -var-name iter
     adams.flow.control.Tee
      adams.flow.control.Branch
       adams.flow.control.Sequence -name zx_new
        adams.flow.transformer.MathExpression -name "calc zx_new" -expression "(@{zx}^2 - @{zy}^2 + @{cx})"
        adams.flow.transformer.SetVariable -name "set zx_new" -var-name zx_new
       adams.flow.control.Sequence -name zy_new
        adams.flow.transformer.MathExpression -name "calc zy_new" -expression "(2*@{zx}*@{zy} + @{cy})"
        adams.flow.transformer.SetVariable -name "set zy_new" -var-name zy_new
     adams.flow.control.Trigger -name zx
      adams.flow.source.Variable -var-name zx_new
      adams.flow.transformer.SetVariable -name "set zx" -var-name zx
      adams.flow.sink.Console -skip true -prefix zx:
     adams.flow.control.Trigger -name zy
      adams.flow.source.Variable -var-name zy_new
      adams.flow.transformer.SetVariable -name "set zx" -var-name zy
      adams.flow.sink.Console -skip true -prefix zy:
   adams.flow.control.IfThenElse -annotation "Determines whether to plot the point or not" -condition "adams.flow.condition.bool.Expression -expression \"((@{zx}^2 + @{zy}^2) < @{limit})\"" -then "adams.flow.control.Sequence -name then" -else "adams.flow.control.Sequence -name else"
    adams.flow.control.Sequence -name then
     adams.flow.source.StorageValue -storage-name image
     adams.flow.transformer.Draw -operation "adams.flow.transformer.draw.Pixel -color #ffffff -x @{x} -y @{y} -type COLOR" -no-copy true
    adams.flow.control.Sequence -name else
     adams.flow.source.StorageValue -storage-name image
     adams.flow.control.Trigger -name "calculate color"
      adams.flow.source.Variable -var-name iter
      adams.flow.transformer.Convert -conversion adams.data.conversion.StringToDouble
      adams.flow.transformer.MathExpression -expression X*100
      adams.flow.transformer.Convert -name Convert-1 -conversion adams.data.conversion.DoubleToInt
      adams.flow.transformer.SetVariable -var-name color
     adams.flow.transformer.Draw -operation "adams.flow.transformer.draw.Pixel -color #ffffff -x @{x} -y @{y} -rgba @{color}" -no-copy true
  adams.flow.control.Trigger -name "display image"
   adams.flow.source.StorageValue -storage-name image
   adams.flow.sink.ImageViewer -writer adams.gui.print.NullWriter -selection-processor adams.gui.visualization.image.selection.NullProcessor -image-overlay adams.gui.visualization.image.NullOverlay

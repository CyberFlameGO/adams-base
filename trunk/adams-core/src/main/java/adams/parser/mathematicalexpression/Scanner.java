/* The following code was generated by JFlex 1.4.2 on 19/02/15 3:50 PM */

/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/*
 * Scanner.java
 * Copyright (C) 2008-2015 University of Waikato, Hamilton, New Zealand
 */

package adams.parser.mathematicalexpression;

import java_cup.runtime.SymbolFactory;
import java.io.*;

/**
 * A scanner for mathematical expressions.
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 * @version $Revision$
 */

public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\56\1\0\1\57\1\66\22\0\1\57\1\12\1\64"+
    "\1\55\1\0\1\6\1\16\1\0\1\62\1\63\1\3\1\2\1\60"+
    "\1\1\1\52\1\4\1\35\1\34\1\42\7\51\1\0\1\61\1\7"+
    "\1\10\1\11\2\0\1\17\1\30\1\32\1\20\1\24\1\25\1\33"+
    "\1\41\1\40\1\50\1\46\1\26\1\44\1\13\1\14\1\37\1\31"+
    "\1\22\1\27\1\15\1\23\1\50\1\45\1\36\1\43\1\50\1\53"+
    "\1\65\1\54\1\5\1\47\1\0\1\17\1\30\1\32\1\20\1\24"+
    "\1\25\1\33\1\41\1\40\1\50\1\46\1\26\1\44\1\13\1\14"+
    "\1\37\1\31\1\22\1\27\1\15\1\23\1\50\1\45\1\36\1\43"+
    "\1\50\1\0\1\21\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\3\14\1\15\2\14\1\16"+
    "\2\14\1\17\5\14\1\20\6\14\2\1\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\0\1\33\1\34\1\35\2\14\1\16\16\14\1\0"+
    "\11\14\2\0\1\14\1\36\1\0\1\14\1\37\10\14"+
    "\1\20\1\0\1\40\1\41\1\42\1\43\1\0\1\13"+
    "\1\44\1\45\1\14\1\46\2\14\1\15\1\14\1\47"+
    "\1\50\4\14\1\51\3\14\1\52\1\53\1\14\1\54"+
    "\4\14\1\55\2\14\1\56\2\14\1\0\1\20\1\57"+
    "\1\60\11\14\1\61\1\62\1\63\1\14\1\64\1\0"+
    "\1\14\1\65\1\66\1\67\1\70\1\71\1\14\1\72"+
    "\4\14\1\73\1\0\2\14\1\74\2\14\1\75\1\76"+
    "\2\14\1\77\1\100\1\101\5\14\1\102\1\14\1\103"+
    "\4\14\1\0\1\104\1\105\1\14\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\5\14\1\57\3\14\1\114\1\115"+
    "\1\116\4\14\1\0\3\14\1\54\1\117\1\14\1\120"+
    "\1\121\2\14\1\37\2\14\1\122\2\14\1\0\1\123"+
    "\6\14\1\124\1\125\1\126\1\0\4\14\1\127\1\14"+
    "\1\130\1\107\1\113\2\14\1\131\1\132\1\14\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\156\0\156\0\156\0\156"+
    "\0\156\0\334\0\156\0\u0113\0\u014a\0\u0181\0\u01b8\0\u01ef"+
    "\0\156\0\u0226\0\u025d\0\156\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\u0672\0\156\0\u06a9\0\u06e0"+
    "\0\156\0\156\0\156\0\u0717\0\u074e\0\u03de\0\u0785\0\u07bc"+
    "\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u05cd"+
    "\0\u0ce4\0\u03de\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\156"+
    "\0\156\0\156\0\156\0\u0fe6\0\u03de\0\u03de\0\u03de\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\u03de\0\u10f9\0\u03de\0\u03de\0\u1130"+
    "\0\u1167\0\u119e\0\u11d5\0\u03de\0\u120c\0\u1243\0\u127a\0\u0a87"+
    "\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea"+
    "\0\u0d1b\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b"+
    "\0\u17a2\0\u17d9\0\u03de\0\u1810\0\u03de\0\u1847\0\156\0\u187e"+
    "\0\u18b5\0\u03de\0\u03de\0\u03de\0\u18ec\0\u03de\0\u1923\0\u03de"+
    "\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u03de\0\u1a36\0\u1a6d\0\u1aa4"+
    "\0\u03de\0\u1adb\0\u1b12\0\u03de\0\u03de\0\u1b49\0\u1b80\0\u03de"+
    "\0\u03de\0\u03de\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u03de"+
    "\0\u1cca\0\u03de\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u03de"+
    "\0\156\0\u1e14\0\u03de\0\u1e4b\0\u03de\0\u03de\0\156\0\u1e82"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u03de\0\u1fcc\0\u2003"+
    "\0\u203a\0\u03de\0\u03de\0\u03de\0\u2071\0\u20a8\0\u20df\0\u2116"+
    "\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u03de\0\u03de\0\u2229\0\u03de"+
    "\0\u03de\0\u2260\0\u2297\0\u03de\0\u22ce\0\u2305\0\u03de\0\u233c"+
    "\0\u2373\0\u23aa\0\u03de\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd"+
    "\0\u24f4\0\u03de\0\u03de\0\u03de\0\u252b\0\u2562\0\u2599\0\u25d0"+
    "\0\u2607\0\u03de\0\u263e\0\156\0\u03de\0\u03de\0\u2675\0\u26ac"+
    "\0\u03de\0\u03de\0\u26e3\0\u03de";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\33\1\34\1\33\2\35\1\33\1\36\1\37\1\40"+
    "\1\35\1\41\1\42\1\43\1\33\1\3\1\33\1\35"+
    "\1\44\1\45\1\3\1\46\2\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\3\1\47\56\55\1\0\5\55\1\56"+
    "\1\57\1\3\127\0\1\60\36\0\1\61\1\62\65\0"+
    "\1\63\66\0\1\62\71\0\1\33\1\64\1\33\1\0"+
    "\1\65\1\33\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\1\66"+
    "\11\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\1\33\1\67\1\33\1\0\1\70\1\33\1\0\1\71"+
    "\11\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\1\72\1\33\1\73\1\0\2\33\1\0\6\33\1\74"+
    "\3\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\1\75\1\33\1\0\12\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\2\33\1\76\7\33\2\0\2\33\1\77\1\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\12\33\2\0\1\33\1\100\2\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\12\33"+
    "\2\0\1\101\3\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\1\102\1\33\1\0\4\33\1\103\5\33"+
    "\2\0\2\33\1\104\1\33\1\0\4\33\1\105\1\33"+
    "\31\0\1\33\1\106\1\33\1\0\2\33\1\0\2\33"+
    "\1\107\7\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\3\33\1\0\2\33\1\0\1\33\1\110\1\111"+
    "\4\33\1\112\2\33\2\0\2\33\1\113\1\33\1\0"+
    "\4\33\1\0\1\33\31\0\3\33\1\0\2\33\1\0"+
    "\12\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\1\33\1\114\1\33\1\0\2\33\1\0\2\33\1\115"+
    "\3\33\1\116\3\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\42\0\1\117\7\0\2\35\4\0\1\35\6\0"+
    "\1\35\1\120\27\0\1\33\1\121\1\33\1\0\2\33"+
    "\1\0\12\33\2\0\2\33\1\122\1\33\1\0\4\33"+
    "\1\123\1\33\31\0\1\124\2\33\1\0\2\33\1\0"+
    "\3\33\1\125\1\33\1\126\4\33\2\0\4\33\1\0"+
    "\4\33\1\0\1\33\31\0\1\33\1\127\1\33\1\0"+
    "\2\33\1\0\12\33\2\0\4\33\1\0\1\130\3\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\2\33"+
    "\1\131\7\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\1\33\1\132\1\33\1\0\1\133\1\33\1\0"+
    "\12\33\2\0\2\33\1\134\1\33\1\0\4\33\1\0"+
    "\1\33\31\0\3\33\1\0\2\33\1\0\2\33\1\135"+
    "\7\33\2\0\4\33\1\0\4\33\1\0\1\33\52\0"+
    "\2\136\4\0\1\136\6\0\1\136\15\0\54\137\1\0"+
    "\12\137\56\46\1\0\10\46\56\55\1\0\5\55\16\0"+
    "\1\140\1\0\1\141\4\0\1\142\41\0\1\143\15\0"+
    "\1\144\66\0\2\33\1\145\1\0\2\33\1\0\12\33"+
    "\2\0\4\33\1\0\2\33\1\146\1\33\1\0\1\33"+
    "\31\0\1\147\2\33\1\0\2\33\1\0\12\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\1\33\1\150\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\1\151\2\33\1\0\2\33\1\0"+
    "\12\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\1\33\1\152\10\33\2\0"+
    "\2\33\1\153\1\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\1\33\1\154\1\0\12\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\1\155"+
    "\1\33\1\0\12\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\31\0\3\33\1\0\2\33\1\0\5\33\1\156"+
    "\4\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\12\33\2\0\4\33\1\0"+
    "\1\157\3\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\12\33\2\0\1\33\1\160\2\33\1\0\4\33"+
    "\1\0\1\33\31\0\1\161\2\33\1\0\2\33\1\0"+
    "\11\33\1\162\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\3\33\1\0\2\33\1\0\12\33\2\0\1\33"+
    "\1\163\2\33\1\0\4\33\1\0\1\33\31\0\3\33"+
    "\1\0\2\33\1\0\12\33\2\0\1\33\1\164\2\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\4\33\1\165\5\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\1\33\1\166\1\33\1\0\2\33"+
    "\1\0\12\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\1\167\2\33\1\0\2\33\1\0\12\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\3\170\1\0"+
    "\2\170\1\0\30\170\30\0\3\33\1\0\2\33\1\0"+
    "\11\33\1\171\2\0\4\33\1\0\2\33\1\172\1\33"+
    "\1\0\1\33\31\0\1\173\2\33\1\0\2\33\1\0"+
    "\3\33\1\174\6\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\31\0\3\33\1\0\2\33\1\0\6\33\1\175"+
    "\3\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\10\33\1\176\1\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\2\33\1\0\1\177\11\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\1\200\2\33\1\0\2\33\1\0"+
    "\11\33\1\201\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\1\202\2\33\1\0\2\33\1\0\5\33\1\203"+
    "\4\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\12\33\2\0\2\33\1\204"+
    "\1\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\2\33\1\0\1\205\11\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\17\0\1\206\32\0\1\207\5\0\1\207"+
    "\6\0\1\207\30\0\3\33\1\0\2\33\1\0\12\33"+
    "\2\0\4\33\1\0\2\33\1\210\1\33\1\0\1\33"+
    "\31\0\3\211\1\0\2\211\1\0\30\211\30\0\3\33"+
    "\1\0\2\33\1\0\3\33\1\212\6\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\2\33\1\213\7\33\2\0\4\33\1\0\1\33"+
    "\1\214\2\33\1\0\1\33\31\0\1\215\2\33\1\0"+
    "\2\33\1\0\12\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\31\0\3\33\1\0\2\33\1\0\1\33\1\216"+
    "\10\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\12\33\2\0\1\33\1\217"+
    "\2\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\1\220\1\33\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\1\221\2\33\1\0\2\33\1\0"+
    "\12\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\2\33\1\222\1\0\2\33\1\0\12\33\2\0\1\223"+
    "\3\33\1\0\4\33\1\0\1\33\31\0\1\224\2\33"+
    "\1\0\1\33\1\225\1\0\12\33\2\0\4\33\1\0"+
    "\4\33\1\0\1\33\31\0\3\33\1\0\2\33\1\0"+
    "\2\33\1\226\7\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\42\0\1\117\7\0\2\136\4\0\1\136\6\0"+
    "\1\136\15\0\54\137\1\227\12\137\25\0\1\230\54\0"+
    "\3\33\1\0\1\231\1\33\1\0\12\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\12\33\2\0\3\33\1\232\1\0\4\33\1\0"+
    "\1\33\31\0\3\33\1\0\2\33\1\0\2\33\1\233"+
    "\7\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\12\33\2\0\4\33\1\0"+
    "\1\33\1\234\2\33\1\0\1\33\31\0\1\235\2\33"+
    "\1\0\2\33\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\2\33\1\236\1\0\2\33\1\0"+
    "\4\33\1\237\5\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\31\0\2\33\1\240\1\0\2\33\1\0\12\33"+
    "\2\0\4\33\1\0\4\33\1\0\1\33\31\0\3\33"+
    "\1\0\2\33\1\0\12\33\2\0\3\33\1\241\1\0"+
    "\4\33\1\0\1\33\31\0\3\33\1\0\2\33\1\0"+
    "\2\33\1\242\7\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\31\0\3\33\1\0\2\33\1\0\5\33\1\243"+
    "\4\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\1\33\1\244\1\33\1\0\2\33\1\0\12\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\1\33\1\245\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\12\33"+
    "\1\246\1\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\2\33\1\247\7\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\2\33\1\0\11\33\1\250\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\2\33\1\251\1\0\2\33\1\0"+
    "\12\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\5\33\1\252\4\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\1\33\1\253"+
    "\1\33\1\0\2\33\1\0\12\33\2\0\4\33\1\0"+
    "\4\33\1\0\1\33\31\0\2\33\1\254\1\0\2\33"+
    "\1\0\12\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\3\33\1\0\2\33\1\0\12\33\2\0\3\33"+
    "\1\255\1\0\4\33\1\0\1\33\31\0\1\256\2\33"+
    "\1\0\2\33\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\10\33"+
    "\1\257\1\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\3\33\1\0\2\33\1\0\12\33\2\0\3\33"+
    "\1\260\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\2\33\1\0\4\33\1\261\5\33\2\0\4\33\1\0"+
    "\4\33\1\0\1\33\31\0\2\33\1\262\1\0\2\33"+
    "\1\0\12\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\52\0\1\207\5\0\1\207\6\0\1\207\51\0\2\207"+
    "\4\0\1\207\6\0\1\207\30\0\3\33\1\0\2\33"+
    "\1\0\2\33\1\263\7\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\12\33"+
    "\2\0\2\33\1\264\1\33\1\0\4\33\1\0\1\33"+
    "\31\0\3\33\1\0\2\33\1\0\4\33\1\265\5\33"+
    "\2\0\4\33\1\0\4\33\1\0\1\33\31\0\3\33"+
    "\1\0\2\33\1\0\12\33\2\0\2\33\1\266\1\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\1\267"+
    "\1\33\1\0\12\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\31\0\3\33\1\0\2\33\1\0\1\270\11\33"+
    "\2\0\4\33\1\0\4\33\1\0\1\33\31\0\1\33"+
    "\1\271\1\33\1\0\2\33\1\0\12\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\1\272\11\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\31\0\2\33\1\273\1\0\2\33\1\0\12\33"+
    "\2\0\4\33\1\0\4\33\1\0\1\33\31\0\3\33"+
    "\1\0\2\33\1\0\10\33\1\274\1\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\1\33\1\275\10\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\12\33"+
    "\2\0\4\33\1\0\3\33\1\276\1\0\1\33\56\0"+
    "\1\277\41\0\3\33\1\0\2\33\1\0\12\33\2\0"+
    "\4\33\1\0\1\300\3\33\1\0\1\33\31\0\3\33"+
    "\1\0\2\33\1\0\12\33\2\0\4\33\1\301\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\1\302\1\33\1\0"+
    "\12\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\2\33\1\303\1\0\2\33\1\0\12\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\1\304\11\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\31\0\3\33\1\0\2\33\1\0\2\33\1\305"+
    "\7\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\1\306\11\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\53\0\1\307\44\0\3\33"+
    "\1\0\2\33\1\0\1\310\11\33\2\0\4\33\1\0"+
    "\4\33\1\0\1\33\31\0\2\33\1\311\1\0\2\33"+
    "\1\0\12\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\2\33\1\312\1\0\2\33\1\0\12\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\1\313\2\33"+
    "\1\0\2\33\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\1\33"+
    "\1\314\10\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\3\33\1\0\1\315\1\33\1\0\12\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\2\33\1\0\1\316\11\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\1\317\2\33\1\0\2\33\1\0"+
    "\12\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\5\33\1\320\4\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\2\33\1\0\5\33\1\321\4\33\2\0\4\33\1\0"+
    "\4\33\1\0\1\33\31\0\1\322\2\33\1\0\2\33"+
    "\1\0\12\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\2\33\1\323\1\0\2\33\1\0\12\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\2\33\1\0\12\33\2\0\3\33\1\324\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\12\33"+
    "\2\0\3\33\1\325\1\0\4\33\1\0\1\33\31\0"+
    "\2\33\1\326\1\0\2\33\1\0\12\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\1\327\2\33\1\0"+
    "\1\33\1\330\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\1\331\66\0\3\33\1\0\2\33"+
    "\1\0\10\33\1\332\1\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\10\33"+
    "\1\333\1\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\3\33\1\0\2\33\1\0\10\33\1\334\1\33"+
    "\2\0\4\33\1\0\4\33\1\0\1\33\31\0\3\33"+
    "\1\0\2\33\1\0\12\33\2\0\3\33\1\335\1\0"+
    "\4\33\1\0\1\33\31\0\3\33\1\0\2\33\1\0"+
    "\1\336\11\33\2\0\2\33\1\337\1\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\1\33\1\340\1\0"+
    "\12\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\12\33\2\0\4\33\1\0"+
    "\1\33\1\341\2\33\1\0\1\33\31\0\2\33\1\342"+
    "\1\0\2\33\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\12\33"+
    "\2\0\2\33\1\343\1\33\1\0\4\33\1\0\1\33"+
    "\31\0\3\33\1\0\2\33\1\0\2\33\1\344\7\33"+
    "\2\0\4\33\1\0\4\33\1\0\1\33\31\0\3\33"+
    "\1\0\2\33\1\0\5\33\1\345\4\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\2\33\1\346\7\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\2\33"+
    "\1\347\7\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\3\33\1\0\2\33\1\0\1\33\1\350\10\33"+
    "\2\0\4\33\1\0\4\33\1\0\1\33\31\0\3\33"+
    "\1\0\1\351\1\33\1\0\12\33\2\0\4\33\1\0"+
    "\4\33\1\0\1\33\56\0\1\352\41\0\3\33\1\0"+
    "\2\33\1\0\2\33\1\353\7\33\2\0\4\33\1\0"+
    "\4\33\1\0\1\33\31\0\3\33\1\0\1\354\1\33"+
    "\1\0\12\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\3\33\1\0\1\355\1\33\1\0\12\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\2\33\1\356"+
    "\1\0\2\33\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\2\33"+
    "\1\357\7\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\2\33\1\360\1\0\2\33\1\0\12\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\2\33\1\0\12\33\2\0\2\33\1\361\1\33\1\0"+
    "\4\33\1\0\1\33\31\0\3\33\1\0\2\33\1\0"+
    "\5\33\1\362\4\33\2\0\4\33\1\0\4\33\1\0"+
    "\1\33\31\0\3\33\1\0\2\33\1\0\12\33\2\0"+
    "\4\33\1\0\1\33\1\363\2\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\12\33\2\0\4\33\1\0"+
    "\1\364\3\33\1\0\1\33\33\0\1\365\64\0\3\33"+
    "\1\0\2\33\1\0\5\33\1\366\4\33\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\5\33\1\367\4\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\2\33\1\0\1\33"+
    "\1\370\10\33\2\0\4\33\1\0\4\33\1\0\1\33"+
    "\31\0\1\371\2\33\1\0\2\33\1\0\12\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\3\33\1\0"+
    "\2\33\1\0\12\33\2\0\4\33\1\0\1\372\3\33"+
    "\1\0\1\33\31\0\1\373\2\33\1\0\2\33\1\0"+
    "\12\33\2\0\4\33\1\0\4\33\1\0\1\33\61\0"+
    "\1\374\36\0\3\33\1\0\2\33\1\0\2\33\1\375"+
    "\7\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\2\33\1\376\7\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\31\0\2\33\1\377"+
    "\1\0\2\33\1\0\12\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\3\33\1\0\1\u0100\1\33\1\0"+
    "\12\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\11\33\1\u0101\2\0\4\33"+
    "\1\0\4\33\1\0\1\33\31\0\3\33\1\0\2\33"+
    "\1\0\2\33\1\u0102\7\33\2\0\4\33\1\0\4\33"+
    "\1\0\1\33\31\0\2\33\1\u0103\1\0\2\33\1\0"+
    "\12\33\2\0\4\33\1\0\4\33\1\0\1\33\31\0"+
    "\3\33\1\0\2\33\1\0\2\33\1\u0104\7\33\2\0"+
    "\4\33\1\0\4\33\1\0\1\33\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10010];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\5\11\1\1\1\11\5\1\1\11"+
    "\2\1\1\11\22\1\6\11\1\1\1\11\1\1\1\0"+
    "\3\11\21\1\1\0\11\1\2\0\2\1\1\0\13\1"+
    "\1\0\4\11\1\0\41\1\1\0\20\1\1\11\1\0"+
    "\15\1\1\0\30\1\1\0\1\1\1\11\5\1\1\11"+
    "\21\1\1\0\20\1\1\0\12\1\1\0\6\1\1\11"+
    "\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  // Author: FracPete (fracpete at waikato dot ac dot nz)
  // Version: $Revision$
  protected SymbolFactory sf;

  public Scanner(InputStream r, SymbolFactory sf){
    this(r);
    this.sf = sf;
  }
  StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 61: 
          { return sf.newSymbol("Sqrt", sym.SQRT);
          }
        case 92: break;
        case 17: 
          { /* ignore line comments. */
          }
        case 93: break;
        case 37: 
          { return sf.newSymbol("Number", sym.NUMBER, new Double(Double.NaN));
          }
        case 94: break;
        case 12: 
          { return sf.newSymbol("Variable", sym.VARIABLE, new String(yytext()));
          }
        case 95: break;
        case 86: 
          { return sf.newSymbol("WeekDay", sym.WEEKDAY);
          }
        case 96: break;
        case 78: 
          { return sf.newSymbol("Month", sym.MONTH);
          }
        case 97: break;
        case 82: 
          { return sf.newSymbol("Minute", sym.MINUTE);
          }
        case 98: break;
        case 27: 
          { return sf.newSymbol("Less or equal than", sym.LE);
          }
        case 99: break;
        case 29: 
          { return sf.newSymbol("Greater or equal than", sym.GE);
          }
        case 100: break;
        case 10: 
          { return sf.newSymbol("Greater than", sym.GT);
          }
        case 101: break;
        case 36: 
          { return sf.newSymbol("Now", sym.NOW);
          }
        case 102: break;
        case 41: 
          { return sf.newSymbol("Exp", sym.EXP);
          }
        case 103: break;
        case 7: 
          { return sf.newSymbol("Modulo", sym.MODULO);
          }
        case 104: break;
        case 77: 
          { return sf.newSymbol("Hypot", sym.HYPOT);
          }
        case 105: break;
        case 57: 
          { return sf.newSymbol("repeat", sym.REPEAT);
          }
        case 106: break;
        case 64: 
          { return sf.newSymbol("Ceil", sym.CEIL);
          }
        case 107: break;
        case 80: 
          { return sf.newSymbol("Second", sym.SECOND);
          }
        case 108: break;
        case 72: 
          { return sf.newSymbol("False", sym.FALSE);
          }
        case 109: break;
        case 45: 
          { return sf.newSymbol("Sin", sym.SIN);
          }
        case 110: break;
        case 32: 
          { string.append('\n');
          }
        case 111: break;
        case 49: 
          { return sf.newSymbol("Max", sym.MAX);
          }
        case 112: break;
        case 35: 
          { string.append('\"');
          }
        case 113: break;
        case 18: 
          { /* ignore white space. */
          }
        case 114: break;
        case 6: 
          { return sf.newSymbol("Power", sym.EXPONENT);
          }
        case 115: break;
        case 50: 
          { return sf.newSymbol("Min", sym.MIN);
          }
        case 116: break;
        case 55: 
          { return sf.newSymbol("Trim", sym.TRIM);
          }
        case 117: break;
        case 69: 
          { return sf.newSymbol("Atan2", sym.ATAN2);
          }
        case 118: break;
        case 76: 
          { return sf.newSymbol("IsNaN", sym.ISNAN);
          }
        case 119: break;
        case 65: 
          { return sf.newSymbol("Cbrt", sym.CBRT);
          }
        case 120: break;
        case 39: 
          { return sf.newSymbol("Abs", sym.ABS);
          }
        case 121: break;
        case 68: 
          { return sf.newSymbol("Today", sym.TODAY);
          }
        case 122: break;
        case 25: 
          { yybegin(YYINITIAL);
                  return sf.newSymbol("String", sym.STRING, string.toString());
          }
        case 123: break;
        case 52: 
          { return sf.newSymbol("Variable", sym.VARIABLE, new String(yytext().replace("[", "").replace("]", "")));
          }
        case 124: break;
        case 74: 
          { return sf.newSymbol("Log10", sym.LOG10);
          }
        case 125: break;
        case 34: 
          { string.append('\r');
          }
        case 126: break;
        case 43: 
          { return sf.newSymbol("Log", sym.LOG);
          }
        case 127: break;
        case 23: 
          { string.setLength(0); yybegin(STRING);
          }
        case 128: break;
        case 84: 
          { return sf.newSymbol("Matches", sym.MATCHES);
          }
        case 129: break;
        case 51: 
          { return sf.newSymbol("Mid", sym.MID);
          }
        case 130: break;
        case 73: 
          { return sf.newSymbol("Floor", sym.FLOOR);
          }
        case 131: break;
        case 63: 
          { return sf.newSymbol("CosH", sym.COSH);
          }
        case 132: break;
        case 2: 
          { return sf.newSymbol("Minus", sym.MINUS);
          }
        case 133: break;
        case 33: 
          { string.append('\t');
          }
        case 134: break;
        case 81: 
          { return sf.newSymbol("Signum", sym.SIGNUM);
          }
        case 135: break;
        case 19: 
          { return sf.newSymbol("Comma", sym.COMMA);
          }
        case 136: break;
        case 5: 
          { return sf.newSymbol("Division", sym.DIVISION);
          }
        case 137: break;
        case 54: 
          { return sf.newSymbol("True", sym.TRUE);
          }
        case 138: break;
        case 85: 
          { return sf.newSymbol("WeekNum", sym.WEEKNUM);
          }
        case 139: break;
        case 67: 
          { return sf.newSymbol("Year", sym.YEAR);
          }
        case 140: break;
        case 88: 
          { return sf.newSymbol("Number", sym.NUMBER, new Double(Double.NEGATIVE_INFINITY));
          }
        case 141: break;
        case 87: 
          { return sf.newSymbol("Number", sym.NUMBER, new Double(Double.POSITIVE_INFINITY));
          }
        case 142: break;
        case 28: 
          { return sf.newSymbol("Not qquals", sym.NOT_EQ);
          }
        case 143: break;
        case 20: 
          { return sf.newSymbol("Semicolor", sym.SEMICOLON);
          }
        case 144: break;
        case 30: 
          { return sf.newSymbol("pi", sym.PI);
          }
        case 145: break;
        case 24: 
          { string.append(yytext());
          }
        case 146: break;
        case 91: 
          { return sf.newSymbol("Concantenate", sym.CONCATENATE);
          }
        case 147: break;
        case 48: 
          { return sf.newSymbol("Procedure", sym.PROCEDURE, new String(yytext().substring(2)));
          }
        case 148: break;
        case 1: 
          { System.err.println("Illegal character: "+yytext());
          }
        case 149: break;
        case 44: 
          { return sf.newSymbol("Length", sym.LENGTH);
          }
        case 150: break;
        case 3: 
          { return sf.newSymbol("Plus", sym.PLUS);
          }
        case 151: break;
        case 8: 
          { return sf.newSymbol("Less than", sym.LT);
          }
        case 152: break;
        case 90: 
          { return sf.newSymbol("Substitute", sym.SUBSTITUTE);
          }
        case 153: break;
        case 16: 
          { return sf.newSymbol("Number", sym.NUMBER, new Double(yytext()));
          }
        case 154: break;
        case 21: 
          { return sf.newSymbol("Left Bracket", sym.LPAREN);
          }
        case 155: break;
        case 31: 
          { return sf.newSymbol("IfElse", sym.IFELSE);
          }
        case 156: break;
        case 79: 
          { return sf.newSymbol("Substr", sym.SUBSTR);
          }
        case 157: break;
        case 58: 
          { return sf.newSymbol("Rint", sym.RINT);
          }
        case 158: break;
        case 38: 
          { return sf.newSymbol("Tan", sym.TAN);
          }
        case 159: break;
        case 47: 
          { return sf.newSymbol("Pow", sym.POW);
          }
        case 160: break;
        case 14: 
          { return sf.newSymbol("Or", sym.OR);
          }
        case 161: break;
        case 53: 
          { return sf.newSymbol("TanH", sym.TANH);
          }
        case 162: break;
        case 26: 
          { string.append('\\');
          }
        case 163: break;
        case 40: 
          { return sf.newSymbol("Day", sym.DAY);
          }
        case 164: break;
        case 66: 
          { return sf.newSymbol("Hour", sym.HOUR);
          }
        case 165: break;
        case 83: 
          { return sf.newSymbol("Replace", sym.REPLACE);
          }
        case 166: break;
        case 13: 
          { return sf.newSymbol("And", sym.AND);
          }
        case 167: break;
        case 62: 
          { return sf.newSymbol("SinH", sym.SINH);
          }
        case 168: break;
        case 15: 
          { return sf.newSymbol("e", sym.E);
          }
        case 169: break;
        case 60: 
          { return sf.newSymbol("Left", sym.LEFT);
          }
        case 170: break;
        case 70: 
          { return sf.newSymbol("Right", sym.RIGHT);
          }
        case 171: break;
        case 71: 
          { return sf.newSymbol("UpperCase", sym.UPPERCASE);
          }
        case 172: break;
        case 89: 
          { return sf.newSymbol("IfMissing", sym.IFMISSING);
          }
        case 173: break;
        case 11: 
          { return sf.newSymbol("Not", sym.NOT);
          }
        case 174: break;
        case 42: 
          { return sf.newSymbol("Function", sym.FUNCTION, new String(yytext().substring(2)));
          }
        case 175: break;
        case 22: 
          { return sf.newSymbol("Right Bracket", sym.RPAREN);
          }
        case 176: break;
        case 4: 
          { return sf.newSymbol("Times", sym.TIMES);
          }
        case 177: break;
        case 59: 
          { return sf.newSymbol("Find", sym.FIND);
          }
        case 178: break;
        case 56: 
          { return sf.newSymbol("Atan", sym.ATAN);
          }
        case 179: break;
        case 75: 
          { return sf.newSymbol("LowerCase", sym.LOWERCASE);
          }
        case 180: break;
        case 46: 
          { return sf.newSymbol("Cos", sym.COS);
          }
        case 181: break;
        case 9: 
          { return sf.newSymbol("Equals", sym.EQ);
          }
        case 182: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     return sf.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

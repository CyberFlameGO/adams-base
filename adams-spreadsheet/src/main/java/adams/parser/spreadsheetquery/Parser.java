
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 28 10:14:43 NZDT 2014
//----------------------------------------------------

package adams.parser.spreadsheetquery;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import adams.core.*;
import adams.core.base.*;
import adams.core.logging.*;
import adams.data.conversion.*;
import adams.data.spreadsheet.*;
import adams.data.spreadsheet.columnfinder.*;
import adams.data.spreadsheet.rowfinder.*;
import adams.flow.core.*;
import adams.flow.control.*;
import adams.flow.transformer.*;
import adams.flow.transformer.SpreadSheetAggregate.Aggregate;
import adams.parser.spreadsheetquery.ParserHelper;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 28 10:14:43 NZDT 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\004\000\002\004\005\000\002\004\006\000" +
    "\002\004\007\000\002\004\007\000\002\004\010\000\002" +
    "\004\011\000\002\004\012\000\002\004\004\000\002\004" +
    "\006\000\002\004\007\000\002\004\011\000\002\005\005" +
    "\000\002\005\007\000\002\006\005\000\002\007\005\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\005\000\002\011\005\000\002\011\003\000\002\012\003" +
    "\000\002\012\004\000\002\012\004\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\010\000\002" +
    "\015\004\000\002\015\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\004\000\002\023\003\000\002\023\003\000\002\025" +
    "\004\000\002\025\006\000\002\016\005\000\002\016\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\006\000" +
    "\002\017\010\000\002\017\006\000\002\017\010\000\002" +
    "\017\006\000\002\017\010\000\002\017\006\000\002\017" +
    "\010\000\002\017\006\000\002\017\010\000\002\017\006" +
    "\000\002\017\010\000\002\017\006\000\002\017\010\000" +
    "\002\017\006\000\002\017\010\000\002\017\006\000\002" +
    "\017\010\000\002\020\005\000\002\020\003\000\002\021" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\010\004\013\005\010\006\006\001\002\000" +
    "\012\002\ufffe\004\ufffe\005\ufffe\006\ufffe\001\002\000\012" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\001\002\000\004\007" +
    "\244\001\002\000\012\002\243\004\013\005\010\006\006" +
    "\001\002\000\004\010\226\001\002\000\012\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\001\002\000\012\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\001\002\000\030\022\020\023\031\024" +
    "\021\025\025\026\026\027\030\030\014\031\016\032\015" +
    "\037\023\055\032\001\002\000\004\035\221\001\002\000" +
    "\004\035\214\001\002\000\004\035\207\001\002\000\022" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\017" +
    "\uffeb\034\uffeb\001\002\000\024\002\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\016\200\020\uffc7\021\uffc7\034\uffc7\035\201\001" +
    "\002\000\004\035\173\001\002\000\020\002\ufff3\004\ufff3" +
    "\005\ufff3\006\ufff3\020\160\021\157\034\156\001\002\000" +
    "\022\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea" +
    "\017\uffea\034\uffea\001\002\000\020\002\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\020\uffc8\021\uffc8\034\uffc8\001\002\000\004" +
    "\035\151\001\002\000\004\035\144\001\002\000\022\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\053\011\050\017\052" +
    "\034\047\001\002\000\004\035\042\001\002\000\004\035" +
    "\035\001\002\000\024\002\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\011\uffe9\016\033\017\uffe9\034\uffe9\001\002\000" +
    "\004\055\034\001\002\000\022\002\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\011\uffe8\017\uffe8\034\uffe8\001\002\000" +
    "\004\055\036\001\002\000\004\036\037\001\002\000\022" +
    "\002\uffc3\004\uffc3\005\uffc3\006\uffc3\016\040\020\uffc3\021" +
    "\uffc3\034\uffc3\001\002\000\004\055\041\001\002\000\020" +
    "\002\uffc2\004\uffc2\005\uffc2\006\uffc2\020\uffc2\021\uffc2\034" +
    "\uffc2\001\002\000\004\055\043\001\002\000\004\036\044" +
    "\001\002\000\022\002\uffbb\004\uffbb\005\uffbb\006\uffbb\016" +
    "\045\020\uffbb\021\uffbb\034\uffbb\001\002\000\004\055\046" +
    "\001\002\000\020\002\uffba\004\uffba\005\uffba\006\uffba\020" +
    "\uffba\021\uffba\034\uffba\001\002\000\006\037\023\055\032" +
    "\001\002\000\004\012\140\001\002\000\012\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\001\002\000\004\054\135\001\002" +
    "\000\010\035\057\046\055\055\054\001\002\000\022\013" +
    "\112\015\111\040\105\041\107\042\106\043\110\044\104" +
    "\045\113\001\002\000\010\035\057\046\055\055\054\001" +
    "\002\000\030\002\uffda\004\uffda\005\uffda\006\uffda\011\uffda" +
    "\017\uffda\035\uffda\046\uffda\047\064\050\065\055\uffda\001" +
    "\002\000\010\035\057\046\055\055\054\001\002\000\024" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\011\061\017\052\035" +
    "\057\046\055\055\054\001\002\000\004\012\070\001\002" +
    "\000\012\002\ufff8\004\ufff8\005\ufff8\006\ufff8\001\002\000" +
    "\030\002\uffdb\004\uffdb\005\uffdb\006\uffdb\011\uffdb\017\uffdb" +
    "\035\uffdb\046\uffdb\047\064\050\065\055\uffdb\001\002\000" +
    "\010\035\057\046\055\055\054\001\002\000\010\035\057" +
    "\046\055\055\054\001\002\000\032\002\uffcf\004\uffcf\005" +
    "\uffcf\006\uffcf\011\uffcf\017\uffcf\035\uffcf\036\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\055\uffcf\001\002\000\032\002\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\011\uffd0\017\uffd0\035\uffd0\036\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\055\uffd0\001\002\000\004\055" +
    "\073\001\002\000\016\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\017\052\034\076\001\002\000\016\002\uffe3\004\uffe3\005" +
    "\uffe3\006\uffe3\017\uffe3\034\uffe3\001\002\000\022\002\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\017\uffe2\034\uffe2\051\075\052" +
    "\074\001\002\000\016\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\017\uffe0\034\uffe0\001\002\000\016\002\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\017\uffe1\034\uffe1\001\002\000\004\055\073" +
    "\001\002\000\012\002\ufff4\004\ufff4\005\ufff4\006\ufff4\001" +
    "\002\000\016\002\uffe4\004\uffe4\005\uffe4\006\uffe4\017\uffe4" +
    "\034\uffe4\001\002\000\010\036\102\047\064\050\065\001" +
    "\002\000\032\002\uffd1\004\uffd1\005\uffd1\006\uffd1\011\uffd1" +
    "\017\uffd1\035\uffd1\036\uffd1\046\uffd1\047\uffd1\050\uffd1\055" +
    "\uffd1\001\002\000\032\002\uffce\004\uffce\005\uffce\006\uffce" +
    "\011\uffce\017\uffce\035\uffce\036\uffce\046\uffce\047\uffce\050" +
    "\uffce\055\uffce\001\002\000\012\033\120\053\117\054\115" +
    "\056\114\001\002\000\012\033\120\053\117\054\115\056" +
    "\114\001\002\000\012\033\120\053\117\054\115\056\114" +
    "\001\002\000\012\033\120\053\117\054\115\056\114\001" +
    "\002\000\012\033\120\053\117\054\115\056\114\001\002" +
    "\000\004\056\127\001\002\000\004\014\126\001\002\000" +
    "\012\033\120\053\117\054\115\056\114\001\002\000\032" +
    "\002\uffde\004\uffde\005\uffde\006\uffde\011\uffde\017\uffde\035" +
    "\uffde\036\uffde\046\uffde\047\uffde\050\uffde\055\uffde\001\002" +
    "\000\032\002\uffdf\004\uffdf\005\uffdf\006\uffdf\011\uffdf\017" +
    "\uffdf\035\uffdf\036\uffdf\046\uffdf\047\uffdf\050\uffdf\055\uffdf" +
    "\001\002\000\032\002\uffd6\004\uffd6\005\uffd6\006\uffd6\011" +
    "\uffd6\017\uffd6\035\uffd6\036\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\055\uffd6\001\002\000\032\002\uffdd\004\uffdd\005\uffdd\006" +
    "\uffdd\011\uffdd\017\uffdd\035\uffdd\036\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\055\uffdd\001\002\000\004\035\121\001\002\000" +
    "\004\056\122\001\002\000\004\034\123\001\002\000\004" +
    "\056\124\001\002\000\004\036\125\001\002\000\032\002" +
    "\uffdc\004\uffdc\005\uffdc\006\uffdc\011\uffdc\017\uffdc\035\uffdc" +
    "\036\uffdc\046\uffdc\047\uffdc\050\uffdc\055\uffdc\001\002\000" +
    "\032\002\uffd2\004\uffd2\005\uffd2\006\uffd2\011\uffd2\017\uffd2" +
    "\035\uffd2\036\uffd2\046\uffd2\047\uffd2\050\uffd2\055\uffd2\001" +
    "\002\000\032\002\uffd3\004\uffd3\005\uffd3\006\uffd3\011\uffd3" +
    "\017\uffd3\035\uffd3\036\uffd3\046\uffd3\047\uffd3\050\uffd3\055" +
    "\uffd3\001\002\000\032\002\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\011\uffd5\017\uffd5\035\uffd5\036\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\055\uffd5\001\002\000\032\002\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\011\uffd8\017\uffd8\035\uffd8\036\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\055\uffd8\001\002\000\032\002\uffd4\004\uffd4" +
    "\005\uffd4\006\uffd4\011\uffd4\017\uffd4\035\uffd4\036\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\055\uffd4\001\002\000\032\002\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\011\uffd9\017\uffd9\035\uffd9\036" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\055\uffd9\001\002\000\032" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\011\uffd7\017\uffd7\035" +
    "\uffd7\036\uffd7\046\uffd7\047\uffd7\050\uffd7\055\uffd7\001\002" +
    "\000\014\002\uffcb\004\uffcb\005\uffcb\006\uffcb\034\136\001" +
    "\002\000\004\054\137\001\002\000\012\002\uffca\004\uffca" +
    "\005\uffca\006\uffca\001\002\000\004\055\073\001\002\000" +
    "\016\002\ufff7\004\ufff7\005\ufff7\006\ufff7\017\052\034\076" +
    "\001\002\000\012\002\ufff6\004\ufff6\005\ufff6\006\ufff6\001" +
    "\002\000\022\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\011\uffec\017\uffec\034\uffec\001\002\000\004\055\145\001" +
    "\002\000\004\036\146\001\002\000\022\002\uffbd\004\uffbd" +
    "\005\uffbd\006\uffbd\016\147\020\uffbd\021\uffbd\034\uffbd\001" +
    "\002\000\004\055\150\001\002\000\020\002\uffbc\004\uffbc" +
    "\005\uffbc\006\uffbc\020\uffbc\021\uffbc\034\uffbc\001\002\000" +
    "\004\055\152\001\002\000\004\036\153\001\002\000\022" +
    "\002\uffbf\004\uffbf\005\uffbf\006\uffbf\016\154\020\uffbf\021" +
    "\uffbf\034\uffbf\001\002\000\004\055\155\001\002\000\020" +
    "\002\uffbe\004\uffbe\005\uffbe\006\uffbe\020\uffbe\021\uffbe\034" +
    "\uffbe\001\002\000\024\022\020\023\031\024\021\025\025" +
    "\026\026\027\030\030\014\031\016\032\015\001\002\000" +
    "\010\035\057\046\055\055\054\001\002\000\004\012\161" +
    "\001\002\000\004\055\164\001\002\000\016\002\uffb2\004" +
    "\uffb2\005\uffb2\006\uffb2\021\uffb2\034\uffb2\001\002\000\016" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\021\166\034\165\001" +
    "\002\000\016\002\uffb1\004\uffb1\005\uffb1\006\uffb1\021\uffb1" +
    "\034\uffb1\001\002\000\004\055\164\001\002\000\010\035" +
    "\057\046\055\055\054\001\002\000\020\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\035\057\046\055\055\054\001\002\000" +
    "\016\002\uffb3\004\uffb3\005\uffb3\006\uffb3\021\uffb3\034\uffb3" +
    "\001\002\000\020\002\ufff2\004\ufff2\005\ufff2\006\ufff2\035" +
    "\057\046\055\055\054\001\002\000\020\002\uffc9\004\uffc9" +
    "\005\uffc9\006\uffc9\020\uffc9\021\uffc9\034\uffc9\001\002\000" +
    "\004\055\174\001\002\000\004\036\175\001\002\000\022" +
    "\002\uffc1\004\uffc1\005\uffc1\006\uffc1\016\176\020\uffc1\021" +
    "\uffc1\034\uffc1\001\002\000\004\055\177\001\002\000\020" +
    "\002\uffc0\004\uffc0\005\uffc0\006\uffc0\020\uffc0\021\uffc0\034" +
    "\uffc0\001\002\000\004\055\206\001\002\000\004\037\202" +
    "\001\002\000\004\036\203\001\002\000\022\002\uffc5\004" +
    "\uffc5\005\uffc5\006\uffc5\016\204\020\uffc5\021\uffc5\034\uffc5" +
    "\001\002\000\004\055\205\001\002\000\020\002\uffc4\004" +
    "\uffc4\005\uffc4\006\uffc4\020\uffc4\021\uffc4\034\uffc4\001\002" +
    "\000\020\002\uffc6\004\uffc6\005\uffc6\006\uffc6\020\uffc6\021" +
    "\uffc6\034\uffc6\001\002\000\004\055\210\001\002\000\004" +
    "\036\211\001\002\000\022\002\uffb5\004\uffb5\005\uffb5\006" +
    "\uffb5\016\212\020\uffb5\021\uffb5\034\uffb5\001\002\000\004" +
    "\055\213\001\002\000\020\002\uffb4\004\uffb4\005\uffb4\006" +
    "\uffb4\020\uffb4\021\uffb4\034\uffb4\001\002\000\004\055\215" +
    "\001\002\000\004\036\216\001\002\000\022\002\uffb7\004" +
    "\uffb7\005\uffb7\006\uffb7\016\217\020\uffb7\021\uffb7\034\uffb7" +
    "\001\002\000\004\055\220\001\002\000\020\002\uffb6\004" +
    "\uffb6\005\uffb6\006\uffb6\020\uffb6\021\uffb6\034\uffb6\001\002" +
    "\000\004\055\222\001\002\000\004\036\223\001\002\000" +
    "\022\002\uffb9\004\uffb9\005\uffb9\006\uffb9\016\224\020\uffb9" +
    "\021\uffb9\034\uffb9\001\002\000\004\055\225\001\002\000" +
    "\020\002\uffb8\004\uffb8\005\uffb8\006\uffb8\020\uffb8\021\uffb8" +
    "\034\uffb8\001\002\000\004\055\227\001\002\000\004\044" +
    "\236\001\002\000\016\002\uffef\004\uffef\005\uffef\006\uffef" +
    "\007\233\034\232\001\002\000\016\002\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\034\uffe6\001\002\000\004\055\227" +
    "\001\002\000\010\035\057\046\055\055\054\001\002\000" +
    "\020\002\uffee\004\uffee\005\uffee\006\uffee\035\057\046\055" +
    "\055\054\001\002\000\016\002\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\034\uffe7\001\002\000\006\054\240\056\237" +
    "\001\002\000\016\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\034\uffcc\001\002\000\016\002\uffcd\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\034\uffcd\001\002\000\016\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\034\uffe5\001\002\000\012" +
    "\002\001\004\001\005\001\006\001\001\002\000\004\002" +
    "\000\001\002\000\010\035\057\046\055\055\054\001\002" +
    "\000\020\002\uffed\004\uffed\005\uffed\006\uffed\035\057\046" +
    "\055\055\054\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\014\002\006\003\004\004\003\005\011\006" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\241\004\003\005\011\006\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\026\010\016\016\021\017\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\057\022\055\001\001\000\002\001\001\000\004\022\102" +
    "\001\001\000\002\001\001\000\004\022\100\001\001\000" +
    "\006\022\062\025\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\066\001\001\000" +
    "\004\022\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\070\012\071\001\001\000\004\025\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\133\001\001\000\004\024" +
    "\132\001\001\000\004\024\131\001\001\000\004\024\130" +
    "\001\001\000\004\024\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\140\012\071\001\001\000\004\025\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\171\001" +
    "\001\000\006\015\170\022\055\001\001\000\002\001\001" +
    "\000\006\020\162\021\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\167\001\001" +
    "\000\006\015\166\022\055\001\001\000\004\022\062\001" +
    "\001\000\002\001\001\000\004\022\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\227\014\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\234\001\001\000\006\015\233\022\055\001" +
    "\001\000\004\022\062\001\001\000\002\001\001\000\004" +
    "\023\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\244\022\055\001\001\000\004\022\062\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  /** the logger. */
  private final static Logger LOGGER = LoggingHelper.getConsoleLogger(Parser.class);
  
  /** variable - value relation. */
  protected HashMap m_Symbols = new HashMap();

  /** the helper. */
  protected ParserHelper m_Helper = new ParserHelper();

  /**
   * Returns the logger.
   *
   * @return the variable-value relation
   */
  public Logger getLogger() {
    return LOGGER;
  }

  /**
   * Sets the variable - value relation to use.
   *
   * @param value the variable-value relation
   */
  public void setSymbols(HashMap value) {
    m_Symbols = value;
    m_Helper.setSymbols(value);
  }

  /**
   * Returns the current variable - value relation in use.
   *
   * @return the variable-value relation
   */
  public HashMap getSymbols() {
    return m_Symbols;
  }

  /**
   * Sets the spreadsheet to use.
   *
   * @param value the spreadsheet
   */
  public void setSheet(SpreadSheet value) {
    m_Helper.setSheet(value);
  }

  /**
   * Returns the current spreadsheet in use.
   *
   * @return the spreadsheet
   */
  public SpreadSheet getSheet() {
    return m_Helper.getSheet();
  }

  /**
   * Returns the parser helper.
   *
   * @return the helper
   */
  public ParserHelper getHelper() {
    return m_Helper;
  }

  /**
   * Returns the partial flow that was generated to process the spreadsheet.
   *
   * @return the partial flow, null if none available
   */
  public SubProcess getSubProcess() {
    return m_Helper.getSubProcess();
  }

  /**
   * Returns the result of the evaluation.
   *
   * @return the result
   */
  public SpreadSheet getResult() {
    return m_Helper.getResult();
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // groupby ::= COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     parser.getHelper().addGroupByColumn(c); 
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("groupby",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // groupby_list ::= groupby 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("groupby_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // groupby_list ::= groupby_list COMMA groupby 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("groupby_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // agg ::= SUM LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.SUM, c); 
                  parser.getHelper().renameAggregate(Aggregate.SUM, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // agg ::= SUM LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.SUM, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // agg ::= IQR LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.INTERQUARTILE, c); 
                  parser.getHelper().renameAggregate(Aggregate.INTERQUARTILE, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // agg ::= IQR LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.INTERQUARTILE, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // agg ::= STDEVP LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.STDEVP, c); 
                  parser.getHelper().renameAggregate(Aggregate.STDEVP, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // agg ::= STDEVP LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.STDEVP, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // agg ::= STDEV LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.STDEV, c); 
                  parser.getHelper().renameAggregate(Aggregate.STDEV, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // agg ::= STDEV LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.STDEV, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // agg ::= MEDIAN LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MEDIAN, c); 
                  parser.getHelper().renameAggregate(Aggregate.MEDIAN, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // agg ::= MEDIAN LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MEDIAN, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // agg ::= AVERAGE LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.AVERAGE, c); 
                  parser.getHelper().renameAggregate(Aggregate.AVERAGE, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // agg ::= AVERAGE LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.AVERAGE, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // agg ::= MAX LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MAX, c); 
                  parser.getHelper().renameAggregate(Aggregate.MAX, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // agg ::= MAX LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MAX, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // agg ::= MIN LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MIN, c); 
                  parser.getHelper().renameAggregate(Aggregate.MIN, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // agg ::= MIN LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MIN, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // agg ::= COUNT LPAREN ALL RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                  parser.getHelper().renameAggregate(Aggregate.COUNT, null, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // agg ::= COUNT LPAREN ALL RPAREN 
            {
              Object RESULT =null;
		 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // agg ::= COUNT AS COLUMN 
            {
              Object RESULT =null;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                  parser.getHelper().renameAggregate(Aggregate.COUNT, null, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // agg ::= COUNT 
            {
              Object RESULT =null;
		 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // agg_list ::= agg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // agg_list ::= agg_list COMMA agg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // limit ::= LIMIT NUMBER COMMA NUMBER 
            {
              Object RESULT =null;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double offset = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double max = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().setLimit(offset.intValue(), max.intValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // limit ::= LIMIT NUMBER 
            {
              Object RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double max = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().setLimit(0, max.intValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().getLogger().fine("string: " + s); RESULT = s; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().getLogger().fine("number: " + n); 
                  RESULT = n; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond ::= NOT cond 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  RESULT = parser.getHelper().invert(c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond ::= cond OR cond 
            {
              int[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c1 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c2 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  RESULT = parser.getHelper().combineWithOr(c1, c2); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cond ::= cond AND cond 
            {
              int[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c1 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c2 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  RESULT = parser.getHelper().combineWithAnd(c1, c2); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cond ::= LPAREN cond RPAREN 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  RESULT = c; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond ::= COLUMN IS NULL 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                  MissingValue rf = new MissingValue();
                  rf.setAttributeRange(new SpreadSheetColumnRange(SpreadSheetColumnRange.escapeColumnName(c)));
                  RESULT = parser.getHelper().applyRowFinder(rf, "is null");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond ::= COLUMN REGEXP STRING 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  ByValue rf = new ByValue();
                  rf.setRegExp(new BaseRegExp(s));
                  rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  RESULT = parser.getHelper().applyRowFinder(rf, c + " regexp " + s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond ::= COLUMN GT comp_arg 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " > ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMinimum(n);
                    rf.setMinimumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMinimum(s);
                    rf.setMinimumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof Date) {
                    Date d = (Date) a;
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf.setMinimumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= COLUMN GE comp_arg 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " >= ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMinimum(n);
                    rf.setMinimumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMinimum(s);
                    rf.setMinimumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof Date) {
                    Date d = (Date) a;
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf.setMinimumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond ::= COLUMN NOT_EQ comp_arg 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " <> ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf1 = new ByNumericValue();
                    rf1.setMinimum(n);
                    rf1.setMinimumIncluded(false);
                    rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    ByNumericValue rf2 = new ByNumericValue();
                    rf2.setMaximum(n);
                    rf2.setMaximumIncluded(false);
                    rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    MultiRowFinder multi = new MultiRowFinder();
                    multi.setFinders(new RowFinder[]{rf1, rf2});
                    multi.setCombination(MultiRowFinder.Combination.JOIN);
                    RESULT = parser.getHelper().applyRowFinder(multi, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf1 = new ByStringComparison();
                    rf1.setMinimum(s);
                    rf1.setMinimumIncluded(false);
                    rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    ByStringComparison rf2 = new ByStringComparison();
                    rf2.setMaximum(s);
                    rf2.setMaximumIncluded(false);
                    rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    MultiRowFinder multi = new MultiRowFinder();
                    multi.setFinders(new RowFinder[]{rf1, rf2});
                    multi.setCombination(MultiRowFinder.Combination.JOIN);
                    RESULT = parser.getHelper().applyRowFinder(multi, c + comp + a);
                  }
                  else if (a instanceof Date) {
                    Date d = (Date) a;
                    ByDateValue rf1 = new ByDateValue();
                    rf1.setFormat(parser.getHelper().getDateFormatString());
                    rf1.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf1.setMinimumIncluded(false);
                    rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    ByDateValue rf2 = new ByDateValue();
                    rf2.setFormat(parser.getHelper().getDateFormatString());
                    rf2.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf2.setMaximumIncluded(false);
                    rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    MultiRowFinder multi = new MultiRowFinder();
                    multi.setFinders(new RowFinder[]{rf1, rf2});
                    multi.setCombination(MultiRowFinder.Combination.JOIN);
                    RESULT = parser.getHelper().applyRowFinder(multi, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond ::= COLUMN EQ comp_arg 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " = ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMinimum(n);
                    rf.setMinimumIncluded(true);
                    rf.setMaximum(n);
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMinimum(s);
                    rf.setMinimumIncluded(true);
                    rf.setMaximum(s);
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof Date) {
                    Date d = (Date) a;
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf.setMinimumIncluded(true);
                    rf.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond ::= COLUMN LE comp_arg 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " <= ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMaximum(n);
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMaximum(s);
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof Date) {
                    Date d = (Date) a;
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= COLUMN LT comp_arg 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " < ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMaximum(n);
                    rf.setMaximumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMaximum(s);
                    rf.setMaximumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof Date) {
                    Date d = (Date) a;
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf.setMaximumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond_list ::= cond 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().setRows(c);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond_list ::= cond_list cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comp_arg ::= PARSE LPAREN STRING COMMA STRING RPAREN 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  if (type.equals("number")) {
                    RESULT = new Double(arg);
                  }
                  else if (type.equals("date")) {
                    RESULT = new BaseDate(arg).dateValue();
                  }
                  else if (type.equals("time")) {
                    RESULT = new BaseTime(arg).dateValue();
                  }
                  else if (type.equals("timestamp")) {
                    RESULT = new BaseDateTime(arg).dateValue();
                  }
                  else {
                    throw new IllegalStateException("Unhandled parse type: " + type);
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_arg",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comp_arg ::= DATE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = d;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_arg",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comp_arg ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_arg",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comp_arg ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = n;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_arg",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // order ::= COLUMN DESC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addSortColumn(c, false); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // order ::= COLUMN ASC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addSortColumn(c, true); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // order ::= COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addSortColumn(c, true); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // order_list ::= order 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // order_list ::= order_list COMMA order 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // upd ::= COLUMN EQ value 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().addUpdateColumn(c, v);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upd",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // upd_list ::= upd 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upd_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // upd_list ::= upd_list COMMA upd 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upd_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // col ::= COLUMN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addColumn(c); 
                  parser.getHelper().renameColumn(c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // col ::= COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addColumn(c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // col ::= ALL 
            {
              Object RESULT =null;
		 
                  parser.getHelper().useAllColumns(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // col_list ::= col 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // col_list ::= col_list COMMA col 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // delete ::= DELETE WHERE cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().delete(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delete",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // update ::= UPDATE SET upd_list WHERE cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().update(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("update",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // update ::= UPDATE SET upd_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().update(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("update",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // select ::= SELECT agg_list GROUP BY groupby_list HAVING cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().aggregate(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // select ::= SELECT agg_list GROUP BY groupby_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().aggregate(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // select ::= SELECT agg_list HAVING cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().aggregate(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // select ::= SELECT agg_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().aggregate(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // select ::= SELECT col_list WHERE cond_list ORDER BY order_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // select ::= SELECT col_list WHERE cond_list ORDER BY order_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // select ::= SELECT col_list ORDER BY order_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // select ::= SELECT col_list ORDER BY order_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // select ::= SELECT col_list WHERE cond_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // select ::= SELECT col_list WHERE cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // select ::= SELECT col_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // select ::= SELECT col_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_part ::= delete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= update 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= select 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}



//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 27 12:45:51 NZST 2013
//----------------------------------------------------

package adams.parser.spreadsheetquery;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import adams.core.*;
import adams.core.base.*;
import adams.core.logging.*;
import adams.data.conversion.*;
import adams.data.spreadsheet.*;
import adams.data.spreadsheet.columnfinder.*;
import adams.data.spreadsheet.rowfinder.*;
import adams.flow.core.*;
import adams.flow.control.*;
import adams.flow.transformer.*;
import adams.parser.spreadsheetquery.ParserHelper;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 27 12:45:51 NZST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\004\000\002\004\005\000\002\004\006\000" +
    "\002\004\007\000\002\004\007\000\002\004\010\000\002" +
    "\004\011\000\002\004\012\000\002\005\005\000\002\005" +
    "\007\000\002\006\005\000\002\007\005\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\005\000" +
    "\002\013\005\000\002\013\003\000\002\014\005\000\002" +
    "\011\005\000\002\011\003\000\002\012\003\000\002\012" +
    "\004\000\002\012\004\000\002\015\004\000\002\015\003" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\017\003\000\002\017\003\000\002\020\004\000" +
    "\002\020\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\010\004\013\005\011\006\006\001\002\000" +
    "\012\002\ufffe\004\ufffe\005\ufffe\006\ufffe\001\002\000\012" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\001\002\000\004\007" +
    "\125\001\002\000\012\002\124\004\013\005\011\006\006" +
    "\001\002\000\012\002\ufffc\004\ufffc\005\ufffc\006\ufffc\001" +
    "\002\000\004\010\107\001\002\000\012\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\001\002\000\006\023\014\040\015\001" +
    "\002\000\022\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\011\uffee\017\uffee\020\uffee\001\002\000\024\002\uffed\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\011\uffed\016\105\017\uffed" +
    "\020\uffed\001\002\000\022\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\011\uffef\017\uffef\020\uffef\001\002\000\022" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\024\011\020\017" +
    "\023\020\021\001\002\000\004\012\102\001\002\000\006" +
    "\023\014\040\015\001\002\000\012\002\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\001\002\000\004\037\076\001\002\000\010" +
    "\021\030\032\026\040\025\001\002\000\022\013\063\015" +
    "\061\024\055\025\060\026\057\027\062\030\056\031\064" +
    "\001\002\000\010\021\030\032\026\040\025\001\002\000" +
    "\030\002\uffe2\004\uffe2\005\uffe2\006\uffe2\011\uffe2\017\uffe2" +
    "\021\uffe2\032\uffe2\033\035\034\036\040\uffe2\001\002\000" +
    "\010\021\030\032\026\040\025\001\002\000\024\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\011\032\017\023\021\030\032" +
    "\026\040\025\001\002\000\004\012\041\001\002\000\012" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\001\002\000\030\002" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\011\uffe3\017\uffe3\021\uffe3" +
    "\032\uffe3\033\035\034\036\040\uffe3\001\002\000\010\021" +
    "\030\032\026\040\025\001\002\000\010\021\030\032\026" +
    "\040\025\001\002\000\032\002\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\011\uffd6\017\uffd6\021\uffd6\022\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\040\uffd6\001\002\000\032\002\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\011\uffd7\017\uffd7\021\uffd7\022\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\040\uffd7\001\002\000\004\040\044\001" +
    "\002\000\016\002\uffe7\004\uffe7\005\uffe7\006\uffe7\017\uffe7" +
    "\020\uffe7\001\002\000\016\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\017\023\020\047\001\002\000\022\002\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\017\uffe6\020\uffe6\035\045\036\046\001" +
    "\002\000\016\002\uffe5\004\uffe5\005\uffe5\006\uffe5\017\uffe5" +
    "\020\uffe5\001\002\000\016\002\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\017\uffe4\020\uffe4\001\002\000\004\040\044\001\002" +
    "\000\012\002\ufff4\004\ufff4\005\ufff4\006\ufff4\001\002\000" +
    "\016\002\uffe8\004\uffe8\005\uffe8\006\uffe8\017\uffe8\020\uffe8" +
    "\001\002\000\010\022\053\033\035\034\036\001\002\000" +
    "\032\002\uffd8\004\uffd8\005\uffd8\006\uffd8\011\uffd8\017\uffd8" +
    "\021\uffd8\022\uffd8\032\uffd8\033\uffd8\034\uffd8\040\uffd8\001" +
    "\002\000\032\002\uffd5\004\uffd5\005\uffd5\006\uffd5\011\uffd5" +
    "\017\uffd5\021\uffd5\022\uffd5\032\uffd5\033\uffd5\034\uffd5\040" +
    "\uffd5\001\002\000\004\037\075\001\002\000\006\037\074" +
    "\041\073\001\002\000\004\037\072\001\002\000\004\037" +
    "\071\001\002\000\004\041\070\001\002\000\004\037\067" +
    "\001\002\000\004\014\066\001\002\000\004\037\065\001" +
    "\002\000\032\002\uffde\004\uffde\005\uffde\006\uffde\011\uffde" +
    "\017\uffde\021\uffde\022\uffde\032\uffde\033\uffde\034\uffde\040" +
    "\uffde\001\002\000\032\002\uffd9\004\uffd9\005\uffd9\006\uffd9" +
    "\011\uffd9\017\uffd9\021\uffd9\022\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\040\uffd9\001\002\000\032\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\011\uffdd\017\uffdd\021\uffdd\022\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\040\uffdd\001\002\000\032\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\011\uffdb\017\uffdb\021\uffdb\022\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\040\uffdb\001\002\000\032\002\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\011\uffe0\017\uffe0\021\uffe0\022" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\040\uffe0\001\002\000\032" +
    "\002\uffdc\004\uffdc\005\uffdc\006\uffdc\011\uffdc\017\uffdc\021" +
    "\uffdc\022\uffdc\032\uffdc\033\uffdc\034\uffdc\040\uffdc\001\002" +
    "\000\032\002\uffda\004\uffda\005\uffda\006\uffda\011\uffda\017" +
    "\uffda\021\uffda\022\uffda\032\uffda\033\uffda\034\uffda\040\uffda" +
    "\001\002\000\032\002\uffdf\004\uffdf\005\uffdf\006\uffdf\011" +
    "\uffdf\017\uffdf\021\uffdf\022\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\040\uffdf\001\002\000\032\002\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\011\uffe1\017\uffe1\021\uffe1\022\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\040\uffe1\001\002\000\014\002\uffd2\004\uffd2\005" +
    "\uffd2\006\uffd2\020\077\001\002\000\004\037\100\001\002" +
    "\000\012\002\uffd1\004\uffd1\005\uffd1\006\uffd1\001\002\000" +
    "\022\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\017\ufff0\020\ufff0\001\002\000\004\040\044\001\002\000" +
    "\016\002\ufff7\004\ufff7\005\ufff7\006\ufff7\017\023\020\047" +
    "\001\002\000\012\002\ufff6\004\ufff6\005\ufff6\006\ufff6\001" +
    "\002\000\004\040\106\001\002\000\022\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\011\uffec\017\uffec\020\uffec\001" +
    "\002\000\004\040\110\001\002\000\004\030\117\001\002" +
    "\000\016\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\114\020" +
    "\113\001\002\000\016\002\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\020\uffea\001\002\000\004\040\110\001\002\000" +
    "\010\021\030\032\026\040\025\001\002\000\020\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\021\030\032\026\040\025\001" +
    "\002\000\016\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\020\uffeb\001\002\000\006\037\121\041\120\001\002\000" +
    "\016\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\020\uffd3" +
    "\001\002\000\016\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\020\uffd4\001\002\000\016\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\020\uffe9\001\002\000\012\002\001\004" +
    "\001\005\001\006\001\001\002\000\004\002\000\001\002" +
    "\000\010\021\030\032\026\040\025\001\002\000\020\002" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\021\030\032\026\040\025" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\014\002\006\003\004\004\003\005\011\006" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\122\004\003\005\011\006\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\016\010\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\021\001\001" +
    "\000\002\001\001\000\004\010\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\030\016\026\001\001" +
    "\000\002\001\001\000\004\016\053\001\001\000\002\001" +
    "\001\000\004\016\051\001\001\000\006\016\033\020\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\037\001\001\000\004\016\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\042\012" +
    "\041\001\001\000\002\001\001\000\004\020\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\102\012\041\001\001" +
    "\000\004\020\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\110\014\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\115\001\001\000\006\015\114\016\026\001\001" +
    "\000\004\016\033\001\001\000\002\001\001\000\004\017" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\125\016\026\001\001\000\004\016\033\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  /** the logger. */
  private final static Logger LOGGER = LoggingHelper.getConsoleLogger(Parser.class);
  
  /** variable - value relation. */
  protected HashMap m_Symbols = new HashMap();

  /** the helper. */
  protected ParserHelper m_Helper = new ParserHelper();

  /**
   * Returns the logger.
   *
   * @return the variable-value relation
   */
  public Logger getLogger() {
    return LOGGER;
  }

  /**
   * Sets the variable - value relation to use.
   *
   * @param value the variable-value relation
   */
  public void setSymbols(HashMap value) {
    m_Symbols = value;
    m_Helper.setSymbols(value);
  }

  /**
   * Returns the current variable - value relation in use.
   *
   * @return the variable-value relation
   */
  public HashMap getSymbols() {
    return m_Symbols;
  }

  /**
   * Sets the spreadsheet to use.
   *
   * @param value the spreadsheet
   */
  public void setSheet(SpreadSheet value) {
    m_Helper.setSheet(value);
  }

  /**
   * Returns the current spreadsheet in use.
   *
   * @return the spreadsheet
   */
  public SpreadSheet getSheet() {
    return m_Helper.getSheet();
  }

  /**
   * Returns the parser helper.
   *
   * @return the helper
   */
  public ParserHelper getHelper() {
    return m_Helper;
  }

  /**
   * Returns the partial flow that was generated to process the spreadsheet.
   *
   * @return the partial flow, null if none available
   */
  public SubProcess getSubProcess() {
    return m_Helper.getSubProcess();
  }

  /**
   * Returns the result of the evaluation.
   *
   * @return the result
   */
  public SpreadSheet getResult() {
    return m_Helper.getResult();
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // limit ::= LIMIT NUMBER COMMA NUMBER 
            {
              Object RESULT =null;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double offset = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double max = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().setLimit(offset.intValue(), max.intValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // limit ::= LIMIT NUMBER 
            {
              Object RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double max = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().setLimit(0, max.intValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().getLogger().fine("string: " + s); RESULT = s; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().getLogger().fine("number: " + n); 
                  RESULT = n; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= NOT cond 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  RESULT = parser.getHelper().invert(c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond ::= cond OR cond 
            {
              int[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c1 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c2 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  RESULT = parser.getHelper().combineWithOr(c1, c2); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond ::= cond AND cond 
            {
              int[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c1 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c2 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  RESULT = parser.getHelper().combineWithAnd(c1, c2); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond ::= LPAREN cond RPAREN 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  RESULT = c; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= COLUMN IS NULL 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                  MissingValue rf = new MissingValue();
                  rf.setAttributeRange(new SpreadSheetColumnRange(SpreadSheetColumnRange.escapeColumnName(c)));
                  RESULT = parser.getHelper().applyRowFinder(rf, "is null");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond ::= COLUMN EQ STRING 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  ByValue rf = new ByValue();
                  rf.setRegExp(new BaseRegExp(s));
                  rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  RESULT = parser.getHelper().applyRowFinder(rf, c + " = " + s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond ::= COLUMN REGEXP STRING 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  ByValue rf = new ByValue();
                  rf.setRegExp(new BaseRegExp(s));
                  rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  RESULT = parser.getHelper().applyRowFinder(rf, c + " regexp " + s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cond ::= COLUMN GT NUMBER 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  ByNumericValue rf = new ByNumericValue();
                  rf.setMinimum(n);
                  rf.setMinimumIncluded(false);
                  rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  RESULT = parser.getHelper().applyRowFinder(rf, c + " > " + n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cond ::= COLUMN GE NUMBER 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  ByNumericValue rf = new ByNumericValue();
                  rf.setMinimum(n);
                  rf.setMinimumIncluded(true);
                  rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  RESULT = parser.getHelper().applyRowFinder(rf, c + " >= " + n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond ::= COLUMN NOT_EQ NUMBER 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  ByNumericValue rf1 = new ByNumericValue();
                  rf1.setMinimum(n);
                  rf1.setMinimumIncluded(false);
                  rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  ByNumericValue rf2 = new ByNumericValue();
                  rf2.setMaximum(n);
                  rf2.setMaximumIncluded(false);
                  rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  MultiRowFinder multi = new MultiRowFinder();
                  multi.setFinders(new RowFinder[]{rf1, rf2});
                  multi.setCombination(MultiRowFinder.Combination.INTERSECT);
                  RESULT = parser.getHelper().applyRowFinder(multi, c + " <> " + n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond ::= COLUMN EQ NUMBER 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  ByNumericValue rf = new ByNumericValue();
                  rf.setMinimum(n);
                  rf.setMinimumIncluded(true);
                  rf.setMaximum(n);
                  rf.setMaximumIncluded(true);
                  rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  RESULT = parser.getHelper().applyRowFinder(rf, c + " = " + n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cond ::= COLUMN LE NUMBER 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  ByNumericValue rf = new ByNumericValue();
                  rf.setMaximum(n);
                  rf.setMaximumIncluded(true);
                  rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  RESULT = parser.getHelper().applyRowFinder(rf, c + " <= " + n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cond ::= COLUMN LT NUMBER 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  ByNumericValue rf = new ByNumericValue();
                  rf.setMaximum(n);
                  rf.setMaximumIncluded(false);
                  rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  RESULT = parser.getHelper().applyRowFinder(rf, c + " < " + n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cond_list ::= cond 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().setRows(c);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cond_list ::= cond_list cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // order ::= COLUMN DESC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addSortColumn(c, false); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // order ::= COLUMN ASC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addSortColumn(c, true); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // order ::= COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addSortColumn(c, true); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // order_list ::= order 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // order_list ::= order_list COMMA order 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // upd ::= COLUMN EQ value 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().addUpdateColumn(c, v);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upd",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // upd_list ::= upd 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upd_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // upd_list ::= upd_list COMMA upd 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upd_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // col ::= COLUMN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addColumn(c); 
                  parser.getHelper().renameColumn(c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // col ::= COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addColumn(c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // col ::= ALL 
            {
              Object RESULT =null;
		 
                  parser.getHelper().useAllColumns(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // col_list ::= col 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // col_list ::= col_list COMMA col 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // delete ::= DELETE WHERE cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().delete(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delete",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // update ::= UPDATE SET upd_list WHERE cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().update(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("update",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // update ::= UPDATE SET upd_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().update(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("update",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // select ::= SELECT col_list WHERE cond_list ORDER BY order_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // select ::= SELECT col_list WHERE cond_list ORDER BY order_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // select ::= SELECT col_list ORDER BY order_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // select ::= SELECT col_list ORDER BY order_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // select ::= SELECT col_list WHERE cond_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // select ::= SELECT col_list WHERE cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // select ::= SELECT col_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // select ::= SELECT col_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_part ::= delete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= update 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= select 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


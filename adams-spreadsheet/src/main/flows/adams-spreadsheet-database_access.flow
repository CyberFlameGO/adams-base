# Project: adams
# Date: 2019-03-18 10:25:08
# User: fracpete
# Charset: UTF-8
# Modules: adams-core,adams-spreadsheet
#
adams.flow.control.Flow -annotation "Demonstrates how to load spreadsheet data into a database (sqlite)\\nand return a subset using a SQL query." -error-handling ACTORS_DECIDE_TO_STOP_ON_ERROR -flow-execution-listener adams.flow.execution.NullListener
 adams.flow.standalone.DatabaseConnection -url jdbc:sqlite:${FLOWS}/output/test.db -data-type-setup adams.db.datatype.DummySetup -close-connection true
 adams.flow.source.Start
 adams.flow.control.ConditionalTrigger -name "drop database" -condition "adams.flow.condition.bool.TableExists -regexp iris"
  adams.flow.standalone.ExecSQL -sql "drop table iris"
 adams.flow.control.Trigger -name "load data"
  adams.flow.source.FileSupplier -file ${FLOWS}/data/iris.csv
  adams.flow.transformer.SpreadSheetFileReader -reader "adams.data.io.input.CsvSpreadSheetReader -data-row-type adams.data.spreadsheet.DenseDataRow -spreadsheet-type adams.data.spreadsheet.SpreadSheet"
  adams.flow.sink.SpreadSheetDbWriter -table iris
 adams.flow.control.Trigger -name "create indices"
  adams.flow.standalone.ExecSQL -name class -sql "create index idx_class on iris (\\\'CLASS\\\');"
 adams.flow.control.Trigger -name "query database"
  adams.flow.source.SpreadSheetDbReader -query "select * from iris where CLASS = \\\'Iris-setosa\\\'" -data-row-type adams.data.spreadsheet.DenseDataRow
  adams.flow.sink.SpreadSheetDisplay -writer adams.data.io.output.NullWriter
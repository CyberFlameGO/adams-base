/*
 * STANDARD ML OF NEW JERSEY COPYRIGHT NOTICE, LICENSE AND DISCLAIMER.
 *
 * Copyright (c) 1989-1998 by Lucent Technologies
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted, provided
 * that the above copyright notice appear in all copies and that both the
 * copyright notice and this permission notice and warranty disclaimer appear
 * in supporting documentation, and that the name of Lucent Technologies, Bell
 * Labs or any Lucent entity not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior permission.
 *
 * Lucent disclaims all warranties with regard to this software, including all
 * implied warranties of merchantability and fitness. In no event shall Lucent
 * be liable for any special, indirect or consequential damages or any damages
 * whatsoever resulting from loss of use, data or profits, whether in an action
 * of contract, negligence or other tortious action, arising out of or in
 * connection with the use or performance of this software.
 *
 * Taken from this URL:
 * http://www.smlnj.org/license.html
 *
 * This license is compatible with the GNU GPL (see section "Standard ML of New
 * Jersey Copyright License"):
 * http://www.gnu.org/licenses/license-list.html#StandardMLofNJ
 */

/*
 * Copyright 1996-1999 by Scott Hudson, Frank Flannery, C. Scott Ananian
 */

package adams.parser.lookupupdate;

import java_cup.runtime.*;

import java.io.*;
import java.util.*;

import adams.core.*;
import adams.core.base.*;
import adams.core.logging.*;
import adams.parser.ParserHelper;

/**
 * A parser for spreadsheet queries.
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 * @version $Revision$
 */

parser code {:
  /** the logger. */
  private final static Logger LOGGER = LoggingHelper.getConsoleLogger(Parser.class);
  
  /** key - value relation. */
  protected HashMap m_Symbols = new HashMap();

  /** the if key - value relation. */
  protected HashMap m_If = new HashMap();

  /** the else key - value relation. */
  protected HashMap m_Else = new HashMap();

  /** the helper. */
  protected ParserHelper m_Helper = new ParserHelper();

  /**
   * Returns the logger.
   *
   * @return the variable-value relation
   */
  public Logger getLogger() {
    return LOGGER;
  }

  /**
   * Sets the variable - value relation to use.
   *
   * @param value the variable-value relation
   */
  public void setSymbols(HashMap value) {
    m_Symbols = value;
    m_Helper.setSymbols(value);
  }

  /**
   * Returns the current variable - value relation in use.
   *
   * @return the variable-value relation
   */
  public HashMap getSymbols() {
    return m_Symbols;
  }

  /**
   * Returns the if lookup items.
   *
   * @return the if lookup items
   */
  public HashMap getIf() {
    return m_If;
  }

  /**
   * Returns the else lookup items.
   *
   * @return the else lookup items
   */
  public HashMap getElse() {
    return m_Else;
  }

  /**
   * Returns the parser helper.
   *
   * @return the helper
   */
  public ParserHelper getHelper() {
    return m_Helper;
  }
:}

terminal IF, THEN, ELSE, END;
terminal MINUS, UMINUS, PLUS, TIMES, DIVISION, EXPONENT, MODULO, ALL;
terminal ASSIGNMENT, SEMI, LPAREN, RPAREN;
terminal TRUE, FALSE, LT, LE, GT, GE, EQ, NOT_EQ, NOT, AND, OR;
terminal Double NUMBER;
terminal Boolean BOOLEAN;
terminal String VARIABLE;
terminal String STRING;

non terminal expr_list, expr_part, conditional;
non terminal assignment, if_assignments, if_assignment, else_assignments, else_assignment;
non terminal Object expr;

precedence left AND, OR;
precedence left LT, LE, GT, GE, EQ, NOT_EQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVISION, MODULO, ALL;
precedence left EXPONENT;
precedence left LPAREN, RPAREN;
precedence left NOT, UMINUS;

expr_list ::= expr_list expr_part | expr_part;

expr_part ::= conditional | assignment;

conditional ::=   IF expr:c THEN if_assignments END
                  {:
                    if (parser.getHelper().toBoolean(c))
                      parser.getSymbols().putAll(parser.getIf());
                    parser.getIf().clear();
                    parser.getElse().clear();
                  :}
                | IF expr:c THEN if_assignments ELSE else_assignments END
                  {:
                    if (parser.getHelper().toBoolean(c))
                      parser.getSymbols().putAll(parser.getIf());
                    else
                      parser.getSymbols().putAll(parser.getElse());
                    parser.getIf().clear();
                    parser.getElse().clear();
                  :}
                ;

assignment ::=
                 VARIABLE:v ASSIGNMENT expr:e SEMI
                 {:
                   parser.getSymbols().put(v.toString(), e);
                 :}

               | ALL LPAREN STRING:s RPAREN ASSIGNMENT expr:e SEMI
                 {:
                    BaseRegExp regex = new BaseRegExp(s);
                    for (Object key: parser.getSymbols().keySet()) {
                      if (regex.isMatch(key.toString()))
                        parser.getSymbols().put(key.toString(), e);
                    }
                 :}
               ;

if_assignments ::= if_assignments if_assignment | if_assignment;
if_assignment ::=
                 VARIABLE:v ASSIGNMENT expr:e SEMI
                 {:
                   parser.getIf().put(v.toString(), e);
                 :}

               | ALL LPAREN STRING:s RPAREN ASSIGNMENT expr:e SEMI
                 {:
                    BaseRegExp regex = new BaseRegExp(s);
                    for (Object key: parser.getSymbols().keySet()) {
                      if (regex.isMatch(key.toString()))
                        parser.getIf().put(key.toString(), e);
                    }
                    for (Object key: parser.getIf().keySet()) {
                      if (regex.isMatch(key.toString()))
                        parser.getIf().put(key.toString(), e);
                    }
                 :}
               ;

else_assignments ::= else_assignments else_assignment | else_assignment;
else_assignment ::=
                 VARIABLE:v ASSIGNMENT expr:e SEMI
                 {:
                   parser.getElse().put(v.toString(), e);
                 :}

               | ALL LPAREN STRING:s RPAREN ASSIGNMENT expr:e SEMI
                 {:
                    BaseRegExp regex = new BaseRegExp(s);
                    for (Object key: parser.getSymbols().keySet()) {
                      if (regex.isMatch(key.toString()))
                        parser.getElse().put(key.toString(), e);
                    }
                    for (Object key: parser.getElse().keySet()) {
                      if (regex.isMatch(key.toString()))
                        parser.getElse().put(key.toString(), e);
                    }
                 :}
               ;

expr ::=        LPAREN expr:c RPAREN
                {: RESULT = c; :}
              | NUMBER:n
                {: RESULT = n; :}
              | STRING:s
                {: RESULT = s; :}
              | BOOLEAN:b
                {: RESULT = b; :}
              | VARIABLE:v
                {: if (parser.getSymbols().containsKey(v.toString()))
                     RESULT = parser.getSymbols().get(v.toString());
                   else
                     throw new IllegalStateException("Unknown symbol '" + v + "'!");
                :}

              | TRUE
                {: RESULT = new Boolean(true); :}
              | FALSE
                {: RESULT = new Boolean(false); :}

              | MINUS expr:c
                {: RESULT = -parser.getHelper().toNumber(c); :}
                %prec UMINUS

              | expr:l LT expr:r
                {: RESULT = new Boolean(parser.getHelper().compare(l, r) < 0); :}
              | expr:l LE expr:r
                {: RESULT = new Boolean(parser.getHelper().compare(l, r) <= 0); :}
              | expr:l GT expr:r
                {: RESULT = new Boolean(parser.getHelper().compare(l, r) > 0); :}
              | expr:l GE expr:r
                {: RESULT = new Boolean(parser.getHelper().compare(l, r) >= 0); :}
              | expr:l EQ expr:r
                {: RESULT = new Boolean(parser.getHelper().compare(l, r) == 0); :}
              | expr:l NOT_EQ expr:r
                {: RESULT = new Boolean(parser.getHelper().compare(l, r) != 0); :}

              | NOT expr:c
                {: RESULT = !parser.getHelper().toBoolean(c); :}
              | expr:l AND expr:r
                {: RESULT = parser.getHelper().toBoolean(l) && parser.getHelper().toBoolean(r); :}
              | expr:l OR expr:r
                {: RESULT = parser.getHelper().toBoolean(l) || parser.getHelper().toBoolean(r); :}

              | expr:l PLUS expr:r
                {: RESULT = new Double(parser.getHelper().toNumber(l) + parser.getHelper().toNumber(r)); :}
              | expr:l MINUS expr:r
                {: RESULT = new Double(parser.getHelper().toNumber(l) - parser.getHelper().toNumber(r)); :}
              | expr:l TIMES expr:r
                {: RESULT = new Double(parser.getHelper().toNumber(l) * parser.getHelper().toNumber(r)); :}
              | expr:l DIVISION expr:r
                {: RESULT = new Double(parser.getHelper().toNumber(l) / parser.getHelper().toNumber(r)); :}
              | expr:l MODULO expr:r
                {: RESULT = new Double(parser.getHelper().toNumber(l) % parser.getHelper().toNumber(r)); :}
              | expr:b EXPONENT expr:e
                {: RESULT = new Double(Math.pow(parser.getHelper().toNumber(b), parser.getHelper().toNumber(e))); :}
              ;

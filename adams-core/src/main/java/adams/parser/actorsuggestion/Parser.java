
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 03 19:43:06 NZST 2016
//----------------------------------------------------

package adams.parser.actorsuggestion;

import adams.core.ClassLocator;
import adams.flow.core.AbstractActor;
import adams.flow.core.Actor;
import adams.flow.core.ActorHandler;
import adams.flow.core.ActorUtils;
import adams.flow.core.Compatibility;
import adams.flow.core.InputConsumer;
import adams.flow.core.OutputProducer;
import adams.gui.flow.tree.Node;
import adams.parser.ParserHelper;

import java.util.logging.Level;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 03 19:43:06 NZST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\006\000\002\005\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\006" +
    "\003\000\002\006\006\000\002\006\006\000\002\006\006" +
    "\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\004\030\006\001\002\000\004\002\074\001" +
    "\002\000\004\002\uffff\001\002\000\032\007\020\010\016" +
    "\011\015\012\010\013\007\023\011\024\012\025\014\026" +
    "\022\034\013\035\017\037\021\001\002\000\012\027\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\001\002\000\012\027\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\001\002\000\012\027\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\001\002\000\012\027\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\001\002\000\016\004\042\005\043\017\070" +
    "\020\071\021\072\022\066\001\002\000\012\027\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\001\002\000\004\016\064\001\002" +
    "\000\004\015\062\001\002\000\016\004\042\005\043\017" +
    "\057\020\060\021\061\022\055\001\002\000\006\014\037" +
    "\036\040\001\002\000\032\007\020\010\016\011\015\012" +
    "\010\013\007\023\011\024\012\025\014\026\022\034\013" +
    "\035\017\037\021\001\002\000\032\007\020\010\016\011" +
    "\015\012\010\013\007\023\011\024\012\025\014\026\022" +
    "\034\013\035\017\037\021\001\002\000\010\031\025\032" +
    "\024\033\026\001\002\000\032\007\020\010\016\011\015" +
    "\012\010\013\007\023\011\024\012\025\014\026\022\034" +
    "\013\035\017\037\021\001\002\000\006\004\031\006\032" +
    "\001\002\000\032\007\020\010\016\011\015\012\010\013" +
    "\007\023\011\024\012\025\014\026\022\034\013\035\017" +
    "\037\021\001\002\000\012\027\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\001\002\000\004\002\ufffe\001\002\000\004\002\uffe1" +
    "\001\002\000\004\002\uffe0\001\002\000\012\027\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\001\002\000\010\027\035\032\024" +
    "\033\026\001\002\000\012\027\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\001\002\000\012\027\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\001\002\000\006\017\053\020\054\001\002\000\006\004" +
    "\042\005\043\001\002\000\012\027\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\001\002\000\012\027\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\001\002\000\004\026\044\001\002\000\010\007\047" +
    "\010\045\011\046\001\002\000\004\027\052\001\002\000" +
    "\004\027\051\001\002\000\004\027\050\001\002\000\012" +
    "\027\uffe4\031\uffe4\032\uffe4\033\uffe4\001\002\000\012\027" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\001\002\000\012\027\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\001\002\000\012\027\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\001\002\000\012\027\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\001\002\000\012\027\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\001\002\000\012\027\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\001\002\000\012\027\uffee\031\uffee\032\uffee\033" +
    "\uffee\001\002\000\012\027\uffec\031\uffec\032\uffec\033\uffec" +
    "\001\002\000\012\027\uffea\031\uffea\032\uffea\033\uffea\001" +
    "\002\000\006\004\042\005\043\001\002\000\012\027\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\001\002\000\006\004\042\005" +
    "\043\001\002\000\012\027\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\001\002\000\012\027\uffe9\031\uffe9\032\uffe9\033\uffe9\001" +
    "\002\000\012\027\uffe7\031\uffe7\032\uffe7\033\uffe7\001\002" +
    "\000\012\027\uffef\031\uffef\032\uffef\033\uffef\001\002\000" +
    "\012\027\uffed\031\uffed\032\uffed\033\uffed\001\002\000\012" +
    "\027\uffeb\031\uffeb\032\uffeb\033\uffeb\001\002\000\004\002" +
    "\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\004\003\072\001\001\000\004\005\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\055\001" +
    "\001\000\002\001\001\000\004\005\035\001\001\000\004" +
    "\005\033\001\001\000\002\001\001\000\004\005\032\001" +
    "\001\000\004\007\027\001\001\000\004\005\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\062\001\001\000" +
    "\002\001\001\000\004\006\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  /** the helper. */
  protected ParserHelper m_Helper = new ParserHelper();

  /** for storing the result of the expression. */
  protected Actor m_Result = null;

  /** the parent of the proposed actor. */
  protected Actor m_Parent = null;

  /** the parent node of the proposed actor. */
  protected Node m_ParentNode = null;

  /** the position to add the proposed actor at. */
  protected Integer m_Position = null;

  /** all the current actors in which to insert/add to the proposed actor. */
  protected Actor[] m_Actors = null;

  /** all the current nodes in which to insert/add to the proposed actor. */
  protected Node[] m_ActorNodes = null;

  /** for checking compatibility. */
  protected Compatibility m_Compatibility = new Compatibility(true);

  /**
   * Returns the parser helper.
   *
   * @return the helper
   */
  public ParserHelper getHelper() {
    return m_Helper;
  }

  /**
   * Sets the result of the evaluation.
   *
   * @param value the result
   */
  public void setResult(Actor value) {
    m_Result = value;
  }

  /**
   * Returns the result of the evaluation.
   *
   * @return the result
   */
  public Actor getResult() {
    return m_Result;
  }

  /**
   * Sets the parent of the proposed actor.
   *
   * @param value the actor
   */
  public void setParent(Actor value) {
    m_Parent = value;
  }

  /**
   * Returns the parent of the proposed actor.
   *
   * @return the parent
   */
  public Actor getParent() {
    return m_Parent;
  }

  /**
   * Sets the parent node of the proposed actor.
   *
   * @param value the actor
   */
  public void setParentNode(Node value) {
    m_ParentNode = value;
  }

  /**
   * Returns the parent node of the proposed actor.
   *
   * @return the parent
   */
  public Node getParentNode() {
    return m_ParentNode;
  }

  /**
   * Sets the position of the proposed actor.
   *
   * @param value the position
   */
  public void setPosition(Integer value) {
    m_Position = value;
  }

  /**
   * Returns the position of the proposed actor.
   *
   * @return the position
   */
  public Integer getPosition() {
    return m_Position;
  }

  /**
   * Sets the actors in which to insert the proposed actor.
   *
   * @param value the actors
   */
  public void setActors(Actor[] value) {
    m_Actors = value;
  }

  /**
   * Returns the actors in which to insert the proposed actor.
   *
   * @return the actors
   */
  public Actor[] getActors() {
    return m_Actors;
  }

  /**
   * Sets the nodes in which to insert the proposed actor.
   *
   * @param value the nodes
   */
  public void setActorNodes(Node[] value) {
    m_ActorNodes = value;
  }

  /**
   * Returns the nodes in which to insert the proposed actor.
   *
   * @return the nodes
   */
  public Node[] getActorNodes() {
    return m_ActorNodes;
  }

  /**
   * Returns whether the proposed actor will get added at the first position.
   *
   * @return true if the actor gets added at the first position
   */
  public Boolean isFirst() {
    return (m_Position == 0);
  }

  /**
   * Returns whether the proposed actor will get added at the last position.
   *
   * @return true if the actor gets added at the last position
   */
  public Boolean isLast() {
    return (m_Position >= m_Actors.length);
  }

  /**
   * Checks whether the actor will get added before or after a standalone
   * actor.
   *
   * @param before whether the actor gets added before or after
   * @return true if the actor gets added before/after a standalone one
   */
  public Boolean isStandalone(boolean before) {
    boolean 	result;

    result = false;

    if (before) {
      if (m_Position + 1 < m_Actors.length) {
        result = (ActorUtils.isStandalone(m_Actors[m_Position + 1]));
      }
    }
    else {
      if (m_Position > 0) {
        result = (ActorUtils.isStandalone(m_Actors[m_Position - 1]));
      }
    }

    return result;
  }

  /**
   * Checks whether the actor will get added before or after a source
   * actor.
   *
   * @param before whether the actor gets added before or after
   * @return true if the actor gets added before/after a source one
   */
  public Boolean isSource(boolean before) {
    boolean 	result;

    result = false;

    if (before) {
      if (m_Position + 1 < m_Actors.length) {
        result = (ActorUtils.isSource(m_Actors[m_Position + 1]));
      }
    }
    else {
      if (m_Position > 0) {
        result = (ActorUtils.isSource(m_Actors[m_Position - 1]));
      }
    }

    return result;
  }

  /**
   * Checks whether the actor will get added before or after a transformer
   * actor.
   *
   * @param before whether the actor gets added before or after
   * @return true if the actor gets added before/after a transformer one
   */
  public Boolean isTransformer(boolean before) {
    boolean 	result;

    result = false;

    if (before) {
      if (m_Position + 1 < m_Actors.length) {
        result = (ActorUtils.isTransformer(m_Actors[m_Position + 1]));
      }
    }
    else {
      if (m_Position > 0) {
        result = (ActorUtils.isTransformer(m_Actors[m_Position - 1]));
      }
    }

    return result;
  }

  /**
   * Checks whether the actor will get added before or after a sink
   * actor.
   *
   * @param before whether the actor gets added before or after
   * @return true if the actor gets added before/after a sink one
   */
  public Boolean isSink(boolean before) {
    boolean 	result;

    result = false;

    if (before) {
      if (m_Position + 1 < m_Actors.length) {
        result = (ActorUtils.isSink(m_Actors[m_Position + 1]));
      }
    }
    else {
      if (m_Position > 0) {
        result = (ActorUtils.isSink(m_Actors[m_Position - 1]));
      }
    }

    return result;
  }

  /**
   * Checks whether the actor will get added before or after a specific
   * actor (exact classname or interface classname).
   *
   * @param before whether the actor gets added before or after
   * @param classname the name of the actor (or interface) to check against
   * @return true if the actor gets added before/after a specific one
   */
  public Boolean isClassname(boolean before, String classname) {
    boolean 	result;

    result = false;

    if (before) {
      if (m_Position + 1 < m_Actors.length) {
        result =    m_Actors[m_Position + 1].getClass().getName().equals(classname)
                 || ClassLocator.hasInterface(classname, m_Actors[m_Position + 1].getClass().getName());
      }
    }
    else {
      if (m_Position > 0) {
        result =    m_Actors[m_Position - 1].getClass().getName().equals(classname)
                 || ClassLocator.hasInterface(classname, m_Actors[m_Position - 1].getClass().getName());
      }
    }

    return result;
  }

  /**
   * Checks whether the preceding actor generates the specified class.
   *
   * @param classname the class that the preceding actor must generate
   * @return true if the preceding actor generates the specified class
   */
  public Boolean precedingGenerates(String classname) {
    Class           cls;

    if (m_Position == 0)
      return false;

    try {
      cls = Class.forName(classname);
    }
    catch (Exception e) {
      getHelper().getLogger().log(Level.SEVERE, "ActorSuggestion (preceding generates): Failed to instantiate class '" + classname + "'!", e);
      return false;
    }

    if (!(m_Actors[m_Position - 1] instanceof OutputProducer))
      return false;

    return (m_Compatibility.isCompatible(((OutputProducer) m_Actors[m_Position - 1]).generates(), new Class[]{cls}));
  }

  /**
   * Checks whether the following actor accepts the specified class.
   *
   * @param classname the class that the following actor must accept
   * @return true if the following actor accepts the specified class
   */
  public Boolean followingAccepts(String classname) {
    Class           cls;

    if (m_Position >= m_Actors.length - 1)
      return false;

    try {
      cls = Class.forName(classname);
    }
    catch (Exception e) {
      getHelper().getLogger().log(Level.SEVERE, "ActorSuggestion (following accepts): Failed to instantiate class '" + classname + "'!", e);
      return false;
    }

    if (!(m_Actors[m_Position + 1] instanceof InputConsumer))
      return false;

    return (m_Compatibility.isCompatible(new Class[]{cls}, ((InputConsumer) m_Actors[m_Position + 1]).accepts()));
  }

  /**
   * Returns the name or fullname of the specified actor.
   *
   * @param actor the actor (PARENT, PRECEDING, FOLLOWING)
   * @param full whether to return full name or just the actor's name
   * @return the name/fullname of the specified actor or empty string if not available
   */
  public String getName(String actor, boolean full) {
    if (actor.equals("PARENT")) {
      if (full)
        return getParent().getFullName();
      else
        return getParent().getName();
    }
    else if (actor.equals("PRECEDING")) {
      if (m_Position > 0) {
        if (full)
          return m_Actors[m_Position - 1].getFullName();
        else
          return m_Actors[m_Position - 1].getName();
      }
    }
    else if (actor.equals("FOLLOWING")) {
      if (m_Position < m_Actors.length - 1) {
        if (full)
          return m_Actors[m_Position + 1].getFullName();
        else
          return m_Actors[m_Position + 1].getName();
      }
    }
    return "";
  }

  /**
   * Processes the commandline and fills in placeholders:
   * classname: ${PARENT.CLASS}, ${PRECEDING.CLASS}, ${FOLLOWING.CLASS}
   * actor's name: ${PARENT.NAME}, ${PRECEDING.NAME}, ${FOLLOWING.NAME}
   * actor's full name: ${PARENT.FULL}, ${PRECEDING.FULL}, ${FOLLOWING.FULL}
   *
   * @param cmdline the commandline to process
   * @return the fullname of the specified actor or empty string if not available
   */
  public String insertPlaceholders(String cmdline) {
    String result;

    result = cmdline;

    // classname
    if (result.contains("${PARENT.CLASS}"))
      result = result.replace("${PARENT.CLASS}", getParent().getClass().getName());
    if (result.contains("${PRECEDING.CLASS}") && (m_Position > 0))
      result = result.replace("${PRECEDING.CLASS}", m_Actors[m_Position - 1].getClass().getName());
    if (result.contains("${FOLLOWING.CLASS}") && (m_Position < m_Actors.length - 1))
      result = result.replace("${FOLLOWING.CLASS}", m_Actors[m_Position + 1].getClass().getName());

    // name
    if (result.contains("${PARENT.NAME}"))
      result = result.replace("${PARENT.NAME}", getParent().getName());
    if (result.contains("${PRECEDING.NAME}") && (m_Position > 0))
      result = result.replace("${PRECEDING.NAME}", m_Actors[m_Position - 1].getName());
    if (result.contains("${FOLLOWING.NAME}") && (m_Position < m_Actors.length - 1))
      result = result.replace("${FOLLOWING.NAME}", m_Actors[m_Position + 1].getName());

    // fullname
    if (result.contains("${PARENT.FULL}"))
      result = result.replace("${PARENT.FULL}", (m_ParentNode != null) ? m_ParentNode.getFullName() : getParent().getFullName());
    if (result.contains("${PRECEDING.FULL}") && (m_Position > 0))
      result = result.replace("${PRECEDING.FULL}", (m_ActorNodes != null) ? m_ActorNodes[m_Position - 1].getFullName() : m_Actors[m_Position - 1].getFullName());
    if (result.contains("${FOLLOWING.FULL}") && (m_Position < m_Actors.length - 1))
      result = result.replace("${FOLLOWING.FULL}", (m_ActorNodes != null) ? m_ActorNodes[m_Position + 1].getFullName() : m_Actors[m_Position + 1].getFullName());

    return result;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cmdexpr ::= CMDLINE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cmdexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cmdexpr ::= CLASSNAME 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cmdexpr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // classexpr ::= FULLNAME LPAREN FOLLOWING RPAREN 
            {
              String RESULT =null;
		 RESULT = parser.getName("FOLLOWING", true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // classexpr ::= FULLNAME LPAREN PRECEDING RPAREN 
            {
              String RESULT =null;
		 RESULT = parser.getName("PRECEDING", true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classexpr ::= FULLNAME LPAREN PARENT RPAREN 
            {
              String RESULT =null;
		 RESULT = parser.getName("PARENT", true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classexpr ::= CLASSNAME 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classexpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolexpr ::= AFTER classexpr 
            {
              Boolean RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.isClassname(false, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolexpr ::= BEFORE classexpr 
            {
              Boolean RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.isClassname(true, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolexpr ::= AFTER SINK 
            {
              Boolean RESULT =null;
		 RESULT = parser.isSink(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolexpr ::= BEFORE SINK 
            {
              Boolean RESULT =null;
		 RESULT = parser.isSink(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolexpr ::= AFTER TRANSFORMER 
            {
              Boolean RESULT =null;
		 RESULT = parser.isTransformer(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolexpr ::= BEFORE TRANSFORMER 
            {
              Boolean RESULT =null;
		 RESULT = parser.isTransformer(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolexpr ::= AFTER SOURCE 
            {
              Boolean RESULT =null;
		 RESULT = parser.isSource(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolexpr ::= BEFORE SOURCE 
            {
              Boolean RESULT =null;
		 RESULT = parser.isSource(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolexpr ::= AFTER STANDALONE 
            {
              Boolean RESULT =null;
		 RESULT = parser.isStandalone(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // boolexpr ::= BEFORE STANDALONE 
            {
              Boolean RESULT =null;
		 RESULT = parser.isStandalone(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // boolexpr ::= FOLLOWING ACCEPTS classexpr 
            {
              Boolean RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.followingAccepts(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolexpr ::= PRECEDING GENERATES classexpr 
            {
              Boolean RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.precedingGenerates(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolexpr ::= PARENT ALLOWS SOURCE 
            {
              Boolean RESULT =null;
		 RESULT = ((ActorHandler) parser.getParent()).getActorHandlerInfo().canContainSource(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // boolexpr ::= PARENT ALLOWS STANDALONE 
            {
              Boolean RESULT =null;
		 RESULT = ((ActorHandler) parser.getParent()).getActorHandlerInfo().canContainStandalones(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // boolexpr ::= PARENT IS classexpr 
            {
              Boolean RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Boolean(parser.getParent().getClass().getName().equals(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // boolexpr ::= ISLAST 
            {
              Boolean RESULT =null;
		 RESULT = parser.isLast(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // boolexpr ::= ISFIRST 
            {
              Boolean RESULT =null;
		 RESULT = parser.isFirst(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // boolexpr ::= NOT boolexpr 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = !b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // boolexpr ::= boolexpr OR boolexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l || r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // boolexpr ::= boolexpr AND boolexpr 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l && r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // boolexpr ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // boolexpr ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // boolexpr ::= BOOLEAN 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // boolexpr ::= LPAREN boolexpr RPAREN 
            {
              Boolean RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolexpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= IF boolexpr THEN cmdexpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  if (e && !c.isEmpty())
                    parser.setResult(AbstractActor.forCommandLine(parser.insertPlaceholders(c)));
                  else
                    parser.setResult(null);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // rule ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rule",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= rule EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // rule ::= expr expr_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rule",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

